{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e6f769da",
   "metadata": {},
   "source": [
    "OBSAH:\n",
    "1. Import a načtení dat\n",
    "2. Průzkum dat\n",
    "3. identifikace aktivních a neaktivních stanic\n",
    "4. Identifikace nejfrektovanějších stanic\n",
    "5. Identifikace stanic, na kterých se kola hromadí a stanic, kde potencionálně chybí\n",
    "6. Výpočet vzdálenosti mezi jednotlivými stanicemi\n",
    "7. Výpočet doby výpůjčky. Identifikace odlehlých hodnot, histogram\n",
    "8. Zobrazení vývoje poptávky po půjčování kol v čase\n",
    "9. Identifikace příčiny výkyvů poptávky\n",
    "10. Vliv počasí na poptávku po kolech\n",
    "11. Půjčují si lidé kola více o víkendu než během pracovního týdne?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eff9f9e0",
   "metadata": {},
   "source": [
    "# 1. IMPORT A NAČTENÍ DAT"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bebf2369",
   "metadata": {},
   "source": [
    "Import používaných knihoven"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8ffeb333",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pymysql in c:\\users\\moste\\anaconda3\\lib\\site-packages (1.0.2)\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import sqlalchemy\n",
    "import datetime as dt\n",
    "import matplotlib.pyplot as plt\n",
    "from math import radians\n",
    "from matplotlib.pyplot import figure\n",
    "\n",
    "!pip install pymysql"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "92cbc8eb",
   "metadata": {},
   "source": [
    "Načtení dat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4f69916c",
   "metadata": {},
   "outputs": [],
   "source": [
    "student_conn_string = \"mysql+pymysql://student:p7%40vw7MCatmnKjy7@data.engeto.com/data\"\n",
    "engeto_data_conn = sqlalchemy.create_engine(student_conn_string)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1467f2b5",
   "metadata": {},
   "source": [
    "# 2. PRŮZKUM DAT"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99546cb3",
   "metadata": {},
   "source": [
    "Načtení tabulky Edingirgh bikes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "28d3fe2f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>duration</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_description</th>\n",
       "      <th>start_station_latitude</th>\n",
       "      <th>start_station_longitude</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>end_station_name</th>\n",
       "      <th>end_station_description</th>\n",
       "      <th>end_station_latitude</th>\n",
       "      <th>end_station_longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2018-09-15 08:52:05</td>\n",
       "      <td>2018-09-15 09:11:48</td>\n",
       "      <td>1182</td>\n",
       "      <td>247</td>\n",
       "      <td>Charlotte Square</td>\n",
       "      <td>North Corner of Charlotte Square</td>\n",
       "      <td>55.952335</td>\n",
       "      <td>-3.207101</td>\n",
       "      <td>259</td>\n",
       "      <td>St Andrew Square</td>\n",
       "      <td>North East corner</td>\n",
       "      <td>55.954728</td>\n",
       "      <td>-3.192653</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2018-09-15 09:24:33</td>\n",
       "      <td>2018-09-15 09:41:09</td>\n",
       "      <td>995</td>\n",
       "      <td>259</td>\n",
       "      <td>St Andrew Square</td>\n",
       "      <td>North East corner</td>\n",
       "      <td>55.954749</td>\n",
       "      <td>-3.192774</td>\n",
       "      <td>262</td>\n",
       "      <td>Canonmills</td>\n",
       "      <td>near Tesco's</td>\n",
       "      <td>55.962804</td>\n",
       "      <td>-3.196284</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2018-09-15 09:48:54</td>\n",
       "      <td>2018-09-15 10:46:40</td>\n",
       "      <td>3466</td>\n",
       "      <td>262</td>\n",
       "      <td>Canonmills</td>\n",
       "      <td>near Tesco's</td>\n",
       "      <td>55.962804</td>\n",
       "      <td>-3.196284</td>\n",
       "      <td>250</td>\n",
       "      <td>Victoria Quay</td>\n",
       "      <td>Entrance to Scottish Government Office</td>\n",
       "      <td>55.977638</td>\n",
       "      <td>-3.174116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2018-09-16 12:01:36</td>\n",
       "      <td>2018-09-16 12:25:26</td>\n",
       "      <td>1430</td>\n",
       "      <td>255</td>\n",
       "      <td>Kings Buildings 4</td>\n",
       "      <td>X-Y Cafe</td>\n",
       "      <td>55.922001</td>\n",
       "      <td>-3.176902</td>\n",
       "      <td>254</td>\n",
       "      <td>Kings Building 3</td>\n",
       "      <td>Kings Building House</td>\n",
       "      <td>55.923479</td>\n",
       "      <td>-3.175385</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2018-09-16 12:03:43</td>\n",
       "      <td>2018-09-16 12:11:16</td>\n",
       "      <td>452</td>\n",
       "      <td>255</td>\n",
       "      <td>Kings Buildings 4</td>\n",
       "      <td>X-Y Cafe</td>\n",
       "      <td>55.922001</td>\n",
       "      <td>-3.176902</td>\n",
       "      <td>253</td>\n",
       "      <td>Kings Building 2</td>\n",
       "      <td>Sanderson Building</td>\n",
       "      <td>55.923202</td>\n",
       "      <td>-3.171646</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>2018-09-16 12:13:56</td>\n",
       "      <td>2018-09-16 12:17:45</td>\n",
       "      <td>228</td>\n",
       "      <td>253</td>\n",
       "      <td>Kings Building 2</td>\n",
       "      <td>Sanderson Building</td>\n",
       "      <td>55.923202</td>\n",
       "      <td>-3.171646</td>\n",
       "      <td>252</td>\n",
       "      <td>Kings Buildings 1</td>\n",
       "      <td>Grant Institute</td>\n",
       "      <td>55.924185</td>\n",
       "      <td>-3.173831</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>2018-09-16 12:19:19</td>\n",
       "      <td>2018-09-16 12:25:26</td>\n",
       "      <td>366</td>\n",
       "      <td>252</td>\n",
       "      <td>Kings Buildings 1</td>\n",
       "      <td>Grant Institute</td>\n",
       "      <td>55.924185</td>\n",
       "      <td>-3.173831</td>\n",
       "      <td>254</td>\n",
       "      <td>Kings Building 3</td>\n",
       "      <td>Kings Building House</td>\n",
       "      <td>55.923479</td>\n",
       "      <td>-3.175385</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>2018-09-16 12:28:57</td>\n",
       "      <td>2018-09-16 12:47:12</td>\n",
       "      <td>1094</td>\n",
       "      <td>254</td>\n",
       "      <td>Kings Building 3</td>\n",
       "      <td>Kings Building House</td>\n",
       "      <td>55.923479</td>\n",
       "      <td>-3.175385</td>\n",
       "      <td>264</td>\n",
       "      <td>Pollock Halls</td>\n",
       "      <td>Pollock Halls Entrance</td>\n",
       "      <td>55.939963</td>\n",
       "      <td>-3.171586</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>2018-09-16 12:29:18</td>\n",
       "      <td>2018-09-16 12:46:24</td>\n",
       "      <td>1025</td>\n",
       "      <td>254</td>\n",
       "      <td>Kings Building 3</td>\n",
       "      <td>Kings Building House</td>\n",
       "      <td>55.923479</td>\n",
       "      <td>-3.175385</td>\n",
       "      <td>264</td>\n",
       "      <td>Pollock Halls</td>\n",
       "      <td>Pollock Halls Entrance</td>\n",
       "      <td>55.939963</td>\n",
       "      <td>-3.171586</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>2018-09-16 12:50:17</td>\n",
       "      <td>2018-09-16 12:51:30</td>\n",
       "      <td>72</td>\n",
       "      <td>264</td>\n",
       "      <td>Pollock Halls</td>\n",
       "      <td>Pollock Halls Entrance</td>\n",
       "      <td>55.939963</td>\n",
       "      <td>-3.171586</td>\n",
       "      <td>264</td>\n",
       "      <td>Pollock Halls</td>\n",
       "      <td>Pollock Halls Entrance</td>\n",
       "      <td>55.939963</td>\n",
       "      <td>-3.171586</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index           started_at             ended_at  duration  \\\n",
       "0      0  2018-09-15 08:52:05  2018-09-15 09:11:48      1182   \n",
       "1      1  2018-09-15 09:24:33  2018-09-15 09:41:09       995   \n",
       "2      2  2018-09-15 09:48:54  2018-09-15 10:46:40      3466   \n",
       "3      3  2018-09-16 12:01:36  2018-09-16 12:25:26      1430   \n",
       "4      4  2018-09-16 12:03:43  2018-09-16 12:11:16       452   \n",
       "5      5  2018-09-16 12:13:56  2018-09-16 12:17:45       228   \n",
       "6      6  2018-09-16 12:19:19  2018-09-16 12:25:26       366   \n",
       "7      7  2018-09-16 12:28:57  2018-09-16 12:47:12      1094   \n",
       "8      8  2018-09-16 12:29:18  2018-09-16 12:46:24      1025   \n",
       "9      9  2018-09-16 12:50:17  2018-09-16 12:51:30        72   \n",
       "\n",
       "   start_station_id start_station_name         start_station_description  \\\n",
       "0               247   Charlotte Square  North Corner of Charlotte Square   \n",
       "1               259   St Andrew Square                 North East corner   \n",
       "2               262         Canonmills                      near Tesco's   \n",
       "3               255  Kings Buildings 4                          X-Y Cafe   \n",
       "4               255  Kings Buildings 4                          X-Y Cafe   \n",
       "5               253   Kings Building 2                Sanderson Building   \n",
       "6               252  Kings Buildings 1                   Grant Institute   \n",
       "7               254   Kings Building 3              Kings Building House   \n",
       "8               254   Kings Building 3              Kings Building House   \n",
       "9               264      Pollock Halls            Pollock Halls Entrance   \n",
       "\n",
       "   start_station_latitude  start_station_longitude  end_station_id  \\\n",
       "0               55.952335                -3.207101             259   \n",
       "1               55.954749                -3.192774             262   \n",
       "2               55.962804                -3.196284             250   \n",
       "3               55.922001                -3.176902             254   \n",
       "4               55.922001                -3.176902             253   \n",
       "5               55.923202                -3.171646             252   \n",
       "6               55.924185                -3.173831             254   \n",
       "7               55.923479                -3.175385             264   \n",
       "8               55.923479                -3.175385             264   \n",
       "9               55.939963                -3.171586             264   \n",
       "\n",
       "    end_station_name                 end_station_description  \\\n",
       "0   St Andrew Square                       North East corner   \n",
       "1         Canonmills                            near Tesco's   \n",
       "2      Victoria Quay  Entrance to Scottish Government Office   \n",
       "3   Kings Building 3                    Kings Building House   \n",
       "4   Kings Building 2                      Sanderson Building   \n",
       "5  Kings Buildings 1                         Grant Institute   \n",
       "6   Kings Building 3                    Kings Building House   \n",
       "7      Pollock Halls                  Pollock Halls Entrance   \n",
       "8      Pollock Halls                  Pollock Halls Entrance   \n",
       "9      Pollock Halls                  Pollock Halls Entrance   \n",
       "\n",
       "   end_station_latitude  end_station_longitude  \n",
       "0             55.954728              -3.192653  \n",
       "1             55.962804              -3.196284  \n",
       "2             55.977638              -3.174116  \n",
       "3             55.923479              -3.175385  \n",
       "4             55.923202              -3.171646  \n",
       "5             55.924185              -3.173831  \n",
       "6             55.923479              -3.175385  \n",
       "7             55.939963              -3.171586  \n",
       "8             55.939963              -3.171586  \n",
       "9             55.939963              -3.171586  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes_df = pd.read_sql(\"select * from edinburgh_bikes\", engeto_data_conn)\n",
    "bikes_df.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f64ca81",
   "metadata": {},
   "source": [
    "Načtení iformací o datových typech v tabulce"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "404caf12",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 438259 entries, 0 to 438258\n",
      "Data columns (total 14 columns):\n",
      " #   Column                     Non-Null Count   Dtype  \n",
      "---  ------                     --------------   -----  \n",
      " 0   index                      438259 non-null  int64  \n",
      " 1   started_at                 438259 non-null  object \n",
      " 2   ended_at                   438259 non-null  object \n",
      " 3   duration                   438259 non-null  int64  \n",
      " 4   start_station_id           438259 non-null  int64  \n",
      " 5   start_station_name         438259 non-null  object \n",
      " 6   start_station_description  435549 non-null  object \n",
      " 7   start_station_latitude     438259 non-null  float64\n",
      " 8   start_station_longitude    438259 non-null  float64\n",
      " 9   end_station_id             438259 non-null  int64  \n",
      " 10  end_station_name           438259 non-null  object \n",
      " 11  end_station_description    435256 non-null  object \n",
      " 12  end_station_latitude       438259 non-null  float64\n",
      " 13  end_station_longitude      438259 non-null  float64\n",
      "dtypes: float64(4), int64(4), object(6)\n",
      "memory usage: 46.8+ MB\n"
     ]
    }
   ],
   "source": [
    "bikes_df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0a55744",
   "metadata": {},
   "source": [
    "Statistiky z tabulky"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "404d79a6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>duration</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>start_station_latitude</th>\n",
       "      <th>start_station_longitude</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>end_station_latitude</th>\n",
       "      <th>end_station_longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>438259.00</td>\n",
       "      <td>438259.00</td>\n",
       "      <td>438259.00</td>\n",
       "      <td>438259.00</td>\n",
       "      <td>438259.00</td>\n",
       "      <td>438259.00</td>\n",
       "      <td>438259.00</td>\n",
       "      <td>438259.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>9043.26</td>\n",
       "      <td>1948.84</td>\n",
       "      <td>924.25</td>\n",
       "      <td>55.95</td>\n",
       "      <td>-3.20</td>\n",
       "      <td>969.35</td>\n",
       "      <td>55.95</td>\n",
       "      <td>-3.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>7439.18</td>\n",
       "      <td>5657.13</td>\n",
       "      <td>670.16</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.04</td>\n",
       "      <td>676.76</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.00</td>\n",
       "      <td>61.00</td>\n",
       "      <td>171.00</td>\n",
       "      <td>55.91</td>\n",
       "      <td>-3.41</td>\n",
       "      <td>171.00</td>\n",
       "      <td>53.40</td>\n",
       "      <td>-3.41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>3252.00</td>\n",
       "      <td>624.00</td>\n",
       "      <td>260.00</td>\n",
       "      <td>55.94</td>\n",
       "      <td>-3.21</td>\n",
       "      <td>262.00</td>\n",
       "      <td>55.94</td>\n",
       "      <td>-3.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>7127.00</td>\n",
       "      <td>1163.00</td>\n",
       "      <td>1019.00</td>\n",
       "      <td>55.95</td>\n",
       "      <td>-3.19</td>\n",
       "      <td>1024.00</td>\n",
       "      <td>55.95</td>\n",
       "      <td>-3.19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>12467.00</td>\n",
       "      <td>2529.00</td>\n",
       "      <td>1728.00</td>\n",
       "      <td>55.96</td>\n",
       "      <td>-3.18</td>\n",
       "      <td>1737.00</td>\n",
       "      <td>55.96</td>\n",
       "      <td>-3.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>31397.00</td>\n",
       "      <td>2363348.00</td>\n",
       "      <td>2268.00</td>\n",
       "      <td>55.99</td>\n",
       "      <td>-3.06</td>\n",
       "      <td>2268.00</td>\n",
       "      <td>55.99</td>\n",
       "      <td>-2.99</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           index    duration  start_station_id  start_station_latitude  \\\n",
       "count  438259.00   438259.00         438259.00               438259.00   \n",
       "mean     9043.26     1948.84            924.25                   55.95   \n",
       "std      7439.18     5657.13            670.16                    0.01   \n",
       "min         0.00       61.00            171.00                   55.91   \n",
       "25%      3252.00      624.00            260.00                   55.94   \n",
       "50%      7127.00     1163.00           1019.00                   55.95   \n",
       "75%     12467.00     2529.00           1728.00                   55.96   \n",
       "max     31397.00  2363348.00           2268.00                   55.99   \n",
       "\n",
       "       start_station_longitude  end_station_id  end_station_latitude  \\\n",
       "count                438259.00       438259.00             438259.00   \n",
       "mean                     -3.20          969.35                 55.95   \n",
       "std                       0.04          676.76                  0.02   \n",
       "min                      -3.41          171.00                 53.40   \n",
       "25%                      -3.21          262.00                 55.94   \n",
       "50%                      -3.19         1024.00                 55.95   \n",
       "75%                      -3.18         1737.00                 55.96   \n",
       "max                      -3.06         2268.00                 55.99   \n",
       "\n",
       "       end_station_longitude  \n",
       "count              438259.00  \n",
       "mean                   -3.20  \n",
       "std                     0.04  \n",
       "min                    -3.41  \n",
       "25%                    -3.21  \n",
       "50%                    -3.19  \n",
       "75%                    -3.18  \n",
       "max                    -2.99  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes_df.describe().round(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5fe286af",
   "metadata": {},
   "source": [
    "Počty chybějících hodnot pro každý sloupec"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8867a5ef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "index                           0\n",
       "started_at                      0\n",
       "ended_at                        0\n",
       "duration                        0\n",
       "start_station_id                0\n",
       "start_station_name              0\n",
       "start_station_description    2710\n",
       "start_station_latitude          0\n",
       "start_station_longitude         0\n",
       "end_station_id                  0\n",
       "end_station_name                0\n",
       "end_station_description      3003\n",
       "end_station_latitude            0\n",
       "end_station_longitude           0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes_df.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e817a69c",
   "metadata": {},
   "source": [
    "# 3. IDENTIFIKACE AKTIVNÍCH A NEAKTIVNÍCH STANIC"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3906fb5",
   "metadata": {},
   "source": [
    "Podle data poslední výpůjčky rozhodneme, zda je stanice aktivní nebo neaktivní k datu 2020-10-01"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "36b65ca6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>duration</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_description</th>\n",
       "      <th>start_station_latitude</th>\n",
       "      <th>start_station_longitude</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>end_station_name</th>\n",
       "      <th>end_station_description</th>\n",
       "      <th>end_station_latitude</th>\n",
       "      <th>end_station_longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2018-09-15</td>\n",
       "      <td>2018-09-15</td>\n",
       "      <td>1182</td>\n",
       "      <td>247</td>\n",
       "      <td>Charlotte Square</td>\n",
       "      <td>North Corner of Charlotte Square</td>\n",
       "      <td>55.952335</td>\n",
       "      <td>-3.207101</td>\n",
       "      <td>259</td>\n",
       "      <td>St Andrew Square</td>\n",
       "      <td>North East corner</td>\n",
       "      <td>55.954728</td>\n",
       "      <td>-3.192653</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2018-09-15</td>\n",
       "      <td>2018-09-15</td>\n",
       "      <td>995</td>\n",
       "      <td>259</td>\n",
       "      <td>St Andrew Square</td>\n",
       "      <td>North East corner</td>\n",
       "      <td>55.954749</td>\n",
       "      <td>-3.192774</td>\n",
       "      <td>262</td>\n",
       "      <td>Canonmills</td>\n",
       "      <td>near Tesco's</td>\n",
       "      <td>55.962804</td>\n",
       "      <td>-3.196284</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2018-09-15</td>\n",
       "      <td>2018-09-15</td>\n",
       "      <td>3466</td>\n",
       "      <td>262</td>\n",
       "      <td>Canonmills</td>\n",
       "      <td>near Tesco's</td>\n",
       "      <td>55.962804</td>\n",
       "      <td>-3.196284</td>\n",
       "      <td>250</td>\n",
       "      <td>Victoria Quay</td>\n",
       "      <td>Entrance to Scottish Government Office</td>\n",
       "      <td>55.977638</td>\n",
       "      <td>-3.174116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>228</td>\n",
       "      <td>253</td>\n",
       "      <td>Kings Building 2</td>\n",
       "      <td>Sanderson Building</td>\n",
       "      <td>55.923202</td>\n",
       "      <td>-3.171646</td>\n",
       "      <td>252</td>\n",
       "      <td>Kings Buildings 1</td>\n",
       "      <td>Grant Institute</td>\n",
       "      <td>55.924185</td>\n",
       "      <td>-3.173831</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>366</td>\n",
       "      <td>252</td>\n",
       "      <td>Kings Buildings 1</td>\n",
       "      <td>Grant Institute</td>\n",
       "      <td>55.924185</td>\n",
       "      <td>-3.173831</td>\n",
       "      <td>254</td>\n",
       "      <td>Kings Building 3</td>\n",
       "      <td>Kings Building House</td>\n",
       "      <td>55.923479</td>\n",
       "      <td>-3.175385</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index  started_at    ended_at  duration  start_station_id  \\\n",
       "0      0  2018-09-15  2018-09-15      1182               247   \n",
       "1      1  2018-09-15  2018-09-15       995               259   \n",
       "2      2  2018-09-15  2018-09-15      3466               262   \n",
       "5      5  2018-09-16  2018-09-16       228               253   \n",
       "6      6  2018-09-16  2018-09-16       366               252   \n",
       "\n",
       "  start_station_name         start_station_description  \\\n",
       "0   Charlotte Square  North Corner of Charlotte Square   \n",
       "1   St Andrew Square                 North East corner   \n",
       "2         Canonmills                      near Tesco's   \n",
       "5   Kings Building 2                Sanderson Building   \n",
       "6  Kings Buildings 1                   Grant Institute   \n",
       "\n",
       "   start_station_latitude  start_station_longitude  end_station_id  \\\n",
       "0               55.952335                -3.207101             259   \n",
       "1               55.954749                -3.192774             262   \n",
       "2               55.962804                -3.196284             250   \n",
       "5               55.923202                -3.171646             252   \n",
       "6               55.924185                -3.173831             254   \n",
       "\n",
       "    end_station_name                 end_station_description  \\\n",
       "0   St Andrew Square                       North East corner   \n",
       "1         Canonmills                            near Tesco's   \n",
       "2      Victoria Quay  Entrance to Scottish Government Office   \n",
       "5  Kings Buildings 1                         Grant Institute   \n",
       "6   Kings Building 3                    Kings Building House   \n",
       "\n",
       "   end_station_latitude  end_station_longitude  \n",
       "0             55.954728              -3.192653  \n",
       "1             55.962804              -3.196284  \n",
       "2             55.977638              -3.174116  \n",
       "5             55.924185              -3.173831  \n",
       "6             55.923479              -3.175385  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes_df[\"started_at\"] = bikes_df[\"started_at\"].str.split(\" \").str[0]\n",
    "bikes_df[\"ended_at\"] = bikes_df[\"ended_at\"].str.split(\" \").str[0]\n",
    "active_station = []\n",
    "time_df = bikes_df[bikes_df[\"ended_at\"] >= \"2020-10-01\"]\n",
    "active_station = list(time_df.end_station_id.unique())\n",
    "active_station_df = bikes_df[bikes_df[\"start_station_id\"].isin(active_station)]\n",
    "active_station_df.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d099b2b0",
   "metadata": {},
   "source": [
    "Vytvoření tabulky, která obsahuje jak jsou aktivně využívány startovací stanice\n",
    "Vytvoření tabulky, která obsahuje jak jsou aktivně využívány konečně stanice\n",
    "Spojení tabulek aktivity starovacích a konečných stanic, podle toho jak jsou využívané\n",
    "Zobrazení 10 aktivních (Active) a neaktivních (Inactive) stanic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e9e43036",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>starts</th>\n",
       "      <th>ends</th>\n",
       "      <th>total</th>\n",
       "      <th>status</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>station_name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Meadows East</th>\n",
       "      <td>17390.0</td>\n",
       "      <td>15225.0</td>\n",
       "      <td>32615.0</td>\n",
       "      <td>Active</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Portobello - Kings Road</th>\n",
       "      <td>11843.0</td>\n",
       "      <td>16656.0</td>\n",
       "      <td>28499.0</td>\n",
       "      <td>Active</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Victoria Quay</th>\n",
       "      <td>10662.0</td>\n",
       "      <td>15254.0</td>\n",
       "      <td>25916.0</td>\n",
       "      <td>Active</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Meadow Place</th>\n",
       "      <td>12464.0</td>\n",
       "      <td>9796.0</td>\n",
       "      <td>22260.0</td>\n",
       "      <td>Active</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Canonmills</th>\n",
       "      <td>9551.0</td>\n",
       "      <td>11940.0</td>\n",
       "      <td>21491.0</td>\n",
       "      <td>Active</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bristo Square</th>\n",
       "      <td>12846.0</td>\n",
       "      <td>7898.0</td>\n",
       "      <td>20744.0</td>\n",
       "      <td>Active</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>St Andrew Square</th>\n",
       "      <td>12218.0</td>\n",
       "      <td>8372.0</td>\n",
       "      <td>20590.0</td>\n",
       "      <td>Active</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Leith Walk</th>\n",
       "      <td>7964.0</td>\n",
       "      <td>11052.0</td>\n",
       "      <td>19016.0</td>\n",
       "      <td>Active</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Duke Street</th>\n",
       "      <td>7288.0</td>\n",
       "      <td>11264.0</td>\n",
       "      <td>18552.0</td>\n",
       "      <td>Active</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dundee Terrace</th>\n",
       "      <td>8801.0</td>\n",
       "      <td>8730.0</td>\n",
       "      <td>17531.0</td>\n",
       "      <td>Active</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          starts     ends    total  status\n",
       "station_name                                              \n",
       "Meadows East             17390.0  15225.0  32615.0  Active\n",
       "Portobello - Kings Road  11843.0  16656.0  28499.0  Active\n",
       "Victoria Quay            10662.0  15254.0  25916.0  Active\n",
       "Meadow Place             12464.0   9796.0  22260.0  Active\n",
       "Canonmills                9551.0  11940.0  21491.0  Active\n",
       "Bristo Square            12846.0   7898.0  20744.0  Active\n",
       "St Andrew Square         12218.0   8372.0  20590.0  Active\n",
       "Leith Walk                7964.0  11052.0  19016.0  Active\n",
       "Duke Street               7288.0  11264.0  18552.0  Active\n",
       "Dundee Terrace            8801.0   8730.0  17531.0  Active"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "start_stations_df = bikes_df.groupby([\"start_station_name\"]).count().sort_values(by=\"index\",ascending=False)[[\"index\"]]\n",
    "start_stations_df = start_stations_df.rename_axis(\"station_name\",axis=0).rename(columns={\"index\" : \"starts\"})\n",
    "end_stations_df = bikes_df.groupby([\"end_station_name\"]).count().sort_values(by=\"index\",ascending=False)[[\"index\"]]\n",
    "end_stations_df = end_stations_df.rename_axis(\"station_name\", axis=0).rename(columns={\"index\" : \"ends\"})\n",
    "connection_df = start_stations_df.join(end_stations_df, how= \"outer\").fillna(0)\n",
    "connection_df[\"total\"] = connection_df[\"starts\"] + connection_df[\"ends\"]\n",
    "connection_df[\"status\"] = np.where(connection_df[\"total\"] > 777, \"Active\", \"Inactive\")\n",
    "connection_df.sort_values(\"total\",ascending=False).head(10)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e2cabfbb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>starts</th>\n",
       "      <th>ends</th>\n",
       "      <th>total</th>\n",
       "      <th>status</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>station_name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Waverley Bridge</th>\n",
       "      <td>8569.0</td>\n",
       "      <td>8402.0</td>\n",
       "      <td>16971.0</td>\n",
       "      <td>Active</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Waverley Court</th>\n",
       "      <td>2531.0</td>\n",
       "      <td>2378.0</td>\n",
       "      <td>4909.0</td>\n",
       "      <td>Active</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Waverley Station</th>\n",
       "      <td>1910.0</td>\n",
       "      <td>1473.0</td>\n",
       "      <td>3383.0</td>\n",
       "      <td>Active</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>West Crosscauseway</th>\n",
       "      <td>4844.0</td>\n",
       "      <td>3593.0</td>\n",
       "      <td>8437.0</td>\n",
       "      <td>Active</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>West Newington Place</th>\n",
       "      <td>19.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>Inactive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Wester Coates Terrace</th>\n",
       "      <td>2525.0</td>\n",
       "      <td>2699.0</td>\n",
       "      <td>5224.0</td>\n",
       "      <td>Active</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Western General</th>\n",
       "      <td>366.0</td>\n",
       "      <td>404.0</td>\n",
       "      <td>770.0</td>\n",
       "      <td>Inactive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Western General Hospital</th>\n",
       "      <td>1892.0</td>\n",
       "      <td>2135.0</td>\n",
       "      <td>4027.0</td>\n",
       "      <td>Active</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Whitehouse Loan</th>\n",
       "      <td>247.0</td>\n",
       "      <td>109.0</td>\n",
       "      <td>356.0</td>\n",
       "      <td>Inactive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Whitehouse Road</th>\n",
       "      <td>62.0</td>\n",
       "      <td>88.0</td>\n",
       "      <td>150.0</td>\n",
       "      <td>Inactive</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          starts    ends    total    status\n",
       "station_name                                               \n",
       "Waverley Bridge           8569.0  8402.0  16971.0    Active\n",
       "Waverley Court            2531.0  2378.0   4909.0    Active\n",
       "Waverley Station          1910.0  1473.0   3383.0    Active\n",
       "West Crosscauseway        4844.0  3593.0   8437.0    Active\n",
       "West Newington Place        19.0    18.0     37.0  Inactive\n",
       "Wester Coates Terrace     2525.0  2699.0   5224.0    Active\n",
       "Western General            366.0   404.0    770.0  Inactive\n",
       "Western General Hospital  1892.0  2135.0   4027.0    Active\n",
       "Whitehouse Loan            247.0   109.0    356.0  Inactive\n",
       "Whitehouse Road             62.0    88.0    150.0  Inactive"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "connection_df.sort_values(\"total\",ascending=False)\n",
    "connection_df.tail(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21b4f688",
   "metadata": {},
   "source": [
    "Zobrazení celkového počtu aktivních a neaktivních stanic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "41e08d71",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Active      117\n",
       "Inactive     54\n",
       "Name: status, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "connection_df[\"status\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "668f85c9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'TOTAL STATIONS')"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x864 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "(connection_df[\"total\"]).plot.hist(edgecolor=\"black\", figsize=(20,12), bins=35)\n",
    "plt.xlabel(\"status\", fontsize = 20, color=\"blue\")\n",
    "plt.ylabel(\"total\", fontsize = 20, color=\"blue\")\n",
    "plt.title(\"TOTAL STATIONS\", fontsize = 20, color = \"red\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e2c9249",
   "metadata": {},
   "source": [
    "# 4. IDENTIFIKACE NEJFREKTOVANĚJŠÍCH STANIC\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "700ff64c",
   "metadata": {},
   "source": [
    "Výpočet rozdílu kolikrát bylo půjčeno kolo v určité stanici jako startovní stanice a kolikrát byla danná stanice použita jako konečná. Podle toho zjistíme kde je kol dostatek(surplu) a kde je kol\n",
    "nedostatek(lack)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "491128af",
   "metadata": {},
   "outputs": [],
   "source": [
    "station_frequency = (active_station_df\n",
    "                        .agg({\"start_station_id\": \"value_counts\", \"end_station_id\": \"value_counts\"})\n",
    "                        .dropna()\n",
    "                        .apply(lambda row: row[\"start_station_id\"] + row[\"end_station_id\"], axis=1)\n",
    "                        .astype(int)\n",
    "                        .sort_values())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "58ed9aca",
   "metadata": {},
   "outputs": [],
   "source": [
    "station_frequency_df = (station_frequency.to_frame()\n",
    "                                            .reset_index()\n",
    "                                            .rename(columns={\"index\": \"start_station_id\", 0: \"frequency\"}))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ef3dfee0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>frequency</th>\n",
       "      <th>start_station_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>265</td>\n",
       "      <td>31067</td>\n",
       "      <td>Meadows East</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1728</td>\n",
       "      <td>28462</td>\n",
       "      <td>Portobello - Kings Road</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>250</td>\n",
       "      <td>24133</td>\n",
       "      <td>Victoria Quay</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1024</td>\n",
       "      <td>19878</td>\n",
       "      <td>Meadow Place 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>262</td>\n",
       "      <td>19844</td>\n",
       "      <td>Canonmills</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   start_station_id  frequency       start_station_name\n",
       "0               265      31067             Meadows East\n",
       "1              1728      28462  Portobello - Kings Road\n",
       "2               250      24133            Victoria Quay\n",
       "3              1024      19878           Meadow Place 2\n",
       "4               262      19844               Canonmills"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "station_frequency_df = (station_frequency.to_frame()\n",
    "                                            .reset_index()\n",
    "                                            .rename(columns={\"index\": \"start_station_id\", 0: \"frequency\"}))\n",
    "station_frequency_df = (pd.merge(station_frequency_df, active_station_df[[\"start_station_id\",\"start_station_name\"]], \n",
    "                                 how=\"inner\", on=\"start_station_id\"))\n",
    "station_frequency_df = (station_frequency_df.loc[pd.DataFrame(np.sort(station_frequency_df[[\"start_station_id\"]],1),\n",
    "                                    index=station_frequency_df.index)\n",
    "                                    .drop_duplicates(keep=\"first\").index]\n",
    "                                    .sort_values(by=\"frequency\", ascending=False)\n",
    "                                    .reset_index(drop=True))\n",
    "station_frequency_df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3ab91277",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>frequency</th>\n",
       "      <th>start_station_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>106</th>\n",
       "      <td>1877</td>\n",
       "      <td>398</td>\n",
       "      <td>Port Edgar Marina</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>1860</td>\n",
       "      <td>360</td>\n",
       "      <td>Ingliston Park &amp; Ride</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>108</th>\n",
       "      <td>1871</td>\n",
       "      <td>250</td>\n",
       "      <td>Scotstoun House</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>109</th>\n",
       "      <td>1031</td>\n",
       "      <td>47</td>\n",
       "      <td>Eden Locke - Aparthotel (RESIDENTS ONLY)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110</th>\n",
       "      <td>299</td>\n",
       "      <td>9</td>\n",
       "      <td>Depot Virtual</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     start_station_id  frequency                        start_station_name\n",
       "106              1877        398                         Port Edgar Marina\n",
       "107              1860        360                     Ingliston Park & Ride\n",
       "108              1871        250                           Scotstoun House\n",
       "109              1031         47  Eden Locke - Aparthotel (RESIDENTS ONLY)\n",
       "110               299          9                             Depot Virtual"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "station_frequency_df.tail(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "48afab69",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x792 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "top = station_frequency_df.head()\n",
    "top.plot(\"start_station_name\",\"frequency\",kind=\"bar\", figsize=(18,11), color=\"blue\",title=\"Top 5 frequency stations\",label =\"Total loans\", grid=True).set_xticklabels(top[\"start_station_name\"], rotation=45, ha=\"right\");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b0f9cfe",
   "metadata": {},
   "source": [
    "# 5. IDENTIFIKACE STANIC, NA KTERÝCH SE KOLA HROMADÍ A STANIC, KDE POTENCIONÁLNĚ CHYBÍ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "92f626c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>starts</th>\n",
       "      <th>ends</th>\n",
       "      <th>total</th>\n",
       "      <th>status</th>\n",
       "      <th>availability</th>\n",
       "      <th>availability_status</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>station_name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Abbeyhill</th>\n",
       "      <td>4686.0</td>\n",
       "      <td>5279.0</td>\n",
       "      <td>9965.0</td>\n",
       "      <td>Active</td>\n",
       "      <td>-593.0</td>\n",
       "      <td>surplus</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Balgreen</th>\n",
       "      <td>85.0</td>\n",
       "      <td>104.0</td>\n",
       "      <td>189.0</td>\n",
       "      <td>Inactive</td>\n",
       "      <td>-19.0</td>\n",
       "      <td>surplus</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Balgreen Road</th>\n",
       "      <td>1884.0</td>\n",
       "      <td>2243.0</td>\n",
       "      <td>4127.0</td>\n",
       "      <td>Active</td>\n",
       "      <td>-359.0</td>\n",
       "      <td>surplus</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Belford Road</th>\n",
       "      <td>1116.0</td>\n",
       "      <td>1030.0</td>\n",
       "      <td>2146.0</td>\n",
       "      <td>Active</td>\n",
       "      <td>86.0</td>\n",
       "      <td>lack</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Boroughmuir</th>\n",
       "      <td>3976.0</td>\n",
       "      <td>4245.0</td>\n",
       "      <td>8221.0</td>\n",
       "      <td>Active</td>\n",
       "      <td>-269.0</td>\n",
       "      <td>surplus</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Borrowman Square</th>\n",
       "      <td>619.0</td>\n",
       "      <td>548.0</td>\n",
       "      <td>1167.0</td>\n",
       "      <td>Active</td>\n",
       "      <td>71.0</td>\n",
       "      <td>lack</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bristo Square</th>\n",
       "      <td>12846.0</td>\n",
       "      <td>7898.0</td>\n",
       "      <td>20744.0</td>\n",
       "      <td>Active</td>\n",
       "      <td>4948.0</td>\n",
       "      <td>lack</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Brunswick Place</th>\n",
       "      <td>7574.0</td>\n",
       "      <td>8320.0</td>\n",
       "      <td>15894.0</td>\n",
       "      <td>Active</td>\n",
       "      <td>-746.0</td>\n",
       "      <td>surplus</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Brunswick Place - Virtual</th>\n",
       "      <td>457.0</td>\n",
       "      <td>485.0</td>\n",
       "      <td>942.0</td>\n",
       "      <td>Active</td>\n",
       "      <td>-28.0</td>\n",
       "      <td>surplus</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bruntsfield</th>\n",
       "      <td>2094.0</td>\n",
       "      <td>1389.0</td>\n",
       "      <td>3483.0</td>\n",
       "      <td>Active</td>\n",
       "      <td>705.0</td>\n",
       "      <td>lack</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            starts    ends    total    status  availability  \\\n",
       "station_name                                                                  \n",
       "Abbeyhill                   4686.0  5279.0   9965.0    Active        -593.0   \n",
       "Balgreen                      85.0   104.0    189.0  Inactive         -19.0   \n",
       "Balgreen Road               1884.0  2243.0   4127.0    Active        -359.0   \n",
       "Belford Road                1116.0  1030.0   2146.0    Active          86.0   \n",
       "Boroughmuir                 3976.0  4245.0   8221.0    Active        -269.0   \n",
       "Borrowman Square             619.0   548.0   1167.0    Active          71.0   \n",
       "Bristo Square              12846.0  7898.0  20744.0    Active        4948.0   \n",
       "Brunswick Place             7574.0  8320.0  15894.0    Active        -746.0   \n",
       "Brunswick Place - Virtual    457.0   485.0    942.0    Active         -28.0   \n",
       "Bruntsfield                 2094.0  1389.0   3483.0    Active         705.0   \n",
       "\n",
       "                          availability_status  \n",
       "station_name                                   \n",
       "Abbeyhill                             surplus  \n",
       "Balgreen                              surplus  \n",
       "Balgreen Road                         surplus  \n",
       "Belford Road                             lack  \n",
       "Boroughmuir                           surplus  \n",
       "Borrowman Square                         lack  \n",
       "Bristo Square                            lack  \n",
       "Brunswick Place                       surplus  \n",
       "Brunswick Place - Virtual             surplus  \n",
       "Bruntsfield                              lack  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "connection_df[\"availability\"] = connection_df[\"starts\"] - connection_df[\"ends\"]\n",
    "connection_df[\"availability_status\"] = np.where(connection_df[\"availability\"]>0, \"lack\", \"surplus\")\n",
    "connection_df.head(10)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68332fc7",
   "metadata": {},
   "source": [
    "Zobrazení součtu počtu stanic, kde je kol dostatek a kde naopak chybí"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "e6f83a60",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "surplus    95\n",
       "lack       76\n",
       "Name: availability_status, dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "connection_df[\"availability_status\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "a653fd6d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2160x1440 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes =plt.subplots(1,2, figsize = (30,20), sharey=True)\n",
    "(ax1, ax2) = axes\n",
    "yaxis = np.linspace(5000,-5000,11)\n",
    "connection_df.sort_values(\"availability_status\", ascending = True).iloc[:10,2].plot.bar(ax=ax1, edgecolor=\"black\", color = \"red\");\n",
    "connection_df.sort_values(\"availability_status\", ascending = False).iloc[:10,2].plot.bar(ax=ax2, edgecolor=\"black\", color = \"green\");\n",
    "ax1.axhline(color=\"green\");\n",
    "ax2.axhline(color=\"red\");\n",
    "ax1.set_title(\"Top 10 shortage stations\", fontsize = 30)\n",
    "ax2.set_title(\"Top 10 surplus stations\", fontsize = 30)\n",
    "ax1.set_yticks(yaxis);\n",
    "ax1.set_ylabel(\"Bikes Surplus\", fontsize = 30);\n",
    "ax1.grid();\n",
    "ax2.grid();\n",
    "plt.tight_layout();"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a70de1e",
   "metadata": {},
   "source": [
    "# 6. VÝPOČET VZDÁLENOSTI MEZI JEDNOTLIVÝMI STANICEMI"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e875d2a",
   "metadata": {},
   "source": [
    "Vytvoření tabulky, která obsahuje souřadnice všech stanic\n",
    "Vytvoření fuknce, která bude umět vypočítat vzdálenost mezi jednotlivými stanicemi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "4d2359f7",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\moste\\AppData\\Local\\Temp/ipykernel_18012/768268032.py:11: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  length_df[\"length_km\"] = length(length_df[\"start_station_latitude\"],length_df[\"start_station_longitude\"],length_df[\"end_station_latitude\"],length_df[\"end_station_longitude\"])\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>length_km</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>start_station_name</th>\n",
       "      <th>end_station_name</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"10\" valign=\"top\">Abbeyhill</th>\n",
       "      <th>Balgreen Road</th>\n",
       "      <td>8.95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Belford Road</th>\n",
       "      <td>6.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Boroughmuir</th>\n",
       "      <td>5.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bristo Square</th>\n",
       "      <td>2.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Brunswick Place</th>\n",
       "      <td>1.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bruntsfield Links</th>\n",
       "      <td>4.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Canonmills</th>\n",
       "      <td>2.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Castle Street</th>\n",
       "      <td>3.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Castle Terrace</th>\n",
       "      <td>3.44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Causewayside</th>\n",
       "      <td>2.26</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                      length_km\n",
       "start_station_name end_station_name            \n",
       "Abbeyhill          Balgreen Road           8.95\n",
       "                   Belford Road            6.00\n",
       "                   Boroughmuir             5.08\n",
       "                   Bristo Square           2.14\n",
       "                   Brunswick Place         1.16\n",
       "                   Bruntsfield Links       4.30\n",
       "                   Canonmills              2.80\n",
       "                   Castle Street           3.47\n",
       "                   Castle Terrace          3.44\n",
       "                   Causewayside            2.26"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "length_df = bikes_df[[\"start_station_name\", \"start_station_latitude\", \"start_station_longitude\", \"end_station_name\", \"end_station_latitude\", \"end_station_longitude\"]]\n",
    "\n",
    "def length(start_lon, start_lat, end_lon, end_lat):\n",
    "    start_lon, start_lat, end_lon, end_lat = map(np.radians, [start_lon, start_lat, end_lon, end_lat])\n",
    "    len_lon = end_lon - start_lon\n",
    "    len_lat = end_lat - start_lat\n",
    "    x = np.sin(len_lat/2.0)**2 + np.cos(start_lat) * np.cos(end_lat) * np.sin(len_lon/2.0)**2\n",
    "    y = 2 * np.arcsin(np.sqrt(x))\n",
    "    km = 6367 * y\n",
    "    return km\n",
    "length_df[\"length_km\"] = length(length_df[\"start_station_latitude\"],length_df[\"start_station_longitude\"],length_df[\"end_station_latitude\"],length_df[\"end_station_longitude\"])\n",
    "length_df = length_df.set_index(\"start_station_name\")\n",
    "length_df = length_df.drop([\"start_station_latitude\", \"start_station_longitude\", \"end_station_latitude\", \"end_station_longitude\"], axis=1)\n",
    "length_df = length_df.query(\"start_station_name != end_station_name\")\n",
    "length_df = length_df.set_index(\"end_station_name\", append=True)\n",
    "length_df.length_km = length_df.length_km.round(2)\n",
    "length_df = length_df.groupby(level=[0,1]).agg({\"length_km\" : \"first\"})\n",
    "length_df.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73f6b72a",
   "metadata": {},
   "source": [
    "# 7. VÝPOČET DOBY VÝPŮJČKY. iDENTIFIKACE ODLEHLÝCH HODNOT, HISTOGRAM"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8fb1e995",
   "metadata": {},
   "source": [
    "Nastavení indexu na startovací stanici\n",
    "Výpočet průměrné doby jedné výpůjčky"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "e6262263",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>duration_sec</th>\n",
       "      <th>duration_min</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>64352.00</td>\n",
       "      <td>64352.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2053.42</td>\n",
       "      <td>34.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2124.35</td>\n",
       "      <td>35.41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>61.00</td>\n",
       "      <td>1.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>696.00</td>\n",
       "      <td>11.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1382.00</td>\n",
       "      <td>23.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2796.00</td>\n",
       "      <td>46.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>27006.00</td>\n",
       "      <td>450.10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       duration_sec  duration_min\n",
       "count      64352.00      64352.00\n",
       "mean        2053.42         34.22\n",
       "std         2124.35         35.41\n",
       "min           61.00          1.02\n",
       "25%          696.00         11.60\n",
       "50%         1382.00         23.03\n",
       "75%         2796.00         46.60\n",
       "max        27006.00        450.10"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "duration_df = bikes_df.query(\"started_at > '2021-01-01'\")[[\"duration\", \"started_at\",\"ended_at\"]]\n",
    "duration_df.rename(columns={\"duration\": \"duration_sec\"}).assign(duration_min = round(duration_df[\"duration\"] / 60, 2)).describe().round(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "00ce2a9e",
   "metadata": {},
   "outputs": [],
   "source": [
    "duration_df = (duration_df.assign(duration_min = round(duration_df[\"duration\"] / 60, 2))\n",
    "    .drop(columns=[\"started_at\", \"ended_at\", \"duration\"])\n",
    "    .reset_index()\n",
    "    .drop(columns=[\"index\"]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9df20abb",
   "metadata": {},
   "source": [
    "Vytovoření histogramu"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "3ee15092",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2160x1296 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(1, 1, figsize=(30,18))\n",
    "duration_df[\"duration_min\"].hist(bins=500, ax=ax)\n",
    "\n",
    "ax.set_title(\"Duration of one loan\", fontsize=30)\n",
    "ax.set_xlabel(\"Rental time (minutes)\", fontsize=18)\n",
    "ax.set_ylabel(\"Number of loans\" , fontsize=18)\n",
    "ax.grid(axis=\"both\")\n",
    "ax.grid()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60f38e89",
   "metadata": {},
   "source": [
    "# 8. ZOBRAZENÍ VÝVOJE POPTÁVKY PO PŮJČOVÁNÍ KOL V ČASE"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f0760c03",
   "metadata": {},
   "source": [
    "Vytvoření nových sloupců \"weekday\".\n",
    "Rozdělení dnův týdnu číselně\n",
    "Přeměna datového typu"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "debc6501",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>duration</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_description</th>\n",
       "      <th>start_station_latitude</th>\n",
       "      <th>start_station_longitude</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>end_station_name</th>\n",
       "      <th>end_station_description</th>\n",
       "      <th>end_station_latitude</th>\n",
       "      <th>end_station_longitude</th>\n",
       "      <th>weekday</th>\n",
       "      <th>month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2018-09-15</td>\n",
       "      <td>2018-09-15</td>\n",
       "      <td>1182</td>\n",
       "      <td>247</td>\n",
       "      <td>Charlotte Square</td>\n",
       "      <td>North Corner of Charlotte Square</td>\n",
       "      <td>55.952335</td>\n",
       "      <td>-3.207101</td>\n",
       "      <td>259</td>\n",
       "      <td>St Andrew Square</td>\n",
       "      <td>North East corner</td>\n",
       "      <td>55.954728</td>\n",
       "      <td>-3.192653</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2018-09-15</td>\n",
       "      <td>2018-09-15</td>\n",
       "      <td>995</td>\n",
       "      <td>259</td>\n",
       "      <td>St Andrew Square</td>\n",
       "      <td>North East corner</td>\n",
       "      <td>55.954749</td>\n",
       "      <td>-3.192774</td>\n",
       "      <td>262</td>\n",
       "      <td>Canonmills</td>\n",
       "      <td>near Tesco's</td>\n",
       "      <td>55.962804</td>\n",
       "      <td>-3.196284</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2018-09-15</td>\n",
       "      <td>2018-09-15</td>\n",
       "      <td>3466</td>\n",
       "      <td>262</td>\n",
       "      <td>Canonmills</td>\n",
       "      <td>near Tesco's</td>\n",
       "      <td>55.962804</td>\n",
       "      <td>-3.196284</td>\n",
       "      <td>250</td>\n",
       "      <td>Victoria Quay</td>\n",
       "      <td>Entrance to Scottish Government Office</td>\n",
       "      <td>55.977638</td>\n",
       "      <td>-3.174116</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>1430</td>\n",
       "      <td>255</td>\n",
       "      <td>Kings Buildings 4</td>\n",
       "      <td>X-Y Cafe</td>\n",
       "      <td>55.922001</td>\n",
       "      <td>-3.176902</td>\n",
       "      <td>254</td>\n",
       "      <td>Kings Building 3</td>\n",
       "      <td>Kings Building House</td>\n",
       "      <td>55.923479</td>\n",
       "      <td>-3.175385</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>452</td>\n",
       "      <td>255</td>\n",
       "      <td>Kings Buildings 4</td>\n",
       "      <td>X-Y Cafe</td>\n",
       "      <td>55.922001</td>\n",
       "      <td>-3.176902</td>\n",
       "      <td>253</td>\n",
       "      <td>Kings Building 2</td>\n",
       "      <td>Sanderson Building</td>\n",
       "      <td>55.923202</td>\n",
       "      <td>-3.171646</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>228</td>\n",
       "      <td>253</td>\n",
       "      <td>Kings Building 2</td>\n",
       "      <td>Sanderson Building</td>\n",
       "      <td>55.923202</td>\n",
       "      <td>-3.171646</td>\n",
       "      <td>252</td>\n",
       "      <td>Kings Buildings 1</td>\n",
       "      <td>Grant Institute</td>\n",
       "      <td>55.924185</td>\n",
       "      <td>-3.173831</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>366</td>\n",
       "      <td>252</td>\n",
       "      <td>Kings Buildings 1</td>\n",
       "      <td>Grant Institute</td>\n",
       "      <td>55.924185</td>\n",
       "      <td>-3.173831</td>\n",
       "      <td>254</td>\n",
       "      <td>Kings Building 3</td>\n",
       "      <td>Kings Building House</td>\n",
       "      <td>55.923479</td>\n",
       "      <td>-3.175385</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>1094</td>\n",
       "      <td>254</td>\n",
       "      <td>Kings Building 3</td>\n",
       "      <td>Kings Building House</td>\n",
       "      <td>55.923479</td>\n",
       "      <td>-3.175385</td>\n",
       "      <td>264</td>\n",
       "      <td>Pollock Halls</td>\n",
       "      <td>Pollock Halls Entrance</td>\n",
       "      <td>55.939963</td>\n",
       "      <td>-3.171586</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>1025</td>\n",
       "      <td>254</td>\n",
       "      <td>Kings Building 3</td>\n",
       "      <td>Kings Building House</td>\n",
       "      <td>55.923479</td>\n",
       "      <td>-3.175385</td>\n",
       "      <td>264</td>\n",
       "      <td>Pollock Halls</td>\n",
       "      <td>Pollock Halls Entrance</td>\n",
       "      <td>55.939963</td>\n",
       "      <td>-3.171586</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>72</td>\n",
       "      <td>264</td>\n",
       "      <td>Pollock Halls</td>\n",
       "      <td>Pollock Halls Entrance</td>\n",
       "      <td>55.939963</td>\n",
       "      <td>-3.171586</td>\n",
       "      <td>264</td>\n",
       "      <td>Pollock Halls</td>\n",
       "      <td>Pollock Halls Entrance</td>\n",
       "      <td>55.939963</td>\n",
       "      <td>-3.171586</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index started_at   ended_at  duration  start_station_id start_station_name  \\\n",
       "0      0 2018-09-15 2018-09-15      1182               247   Charlotte Square   \n",
       "1      1 2018-09-15 2018-09-15       995               259   St Andrew Square   \n",
       "2      2 2018-09-15 2018-09-15      3466               262         Canonmills   \n",
       "3      3 2018-09-16 2018-09-16      1430               255  Kings Buildings 4   \n",
       "4      4 2018-09-16 2018-09-16       452               255  Kings Buildings 4   \n",
       "5      5 2018-09-16 2018-09-16       228               253   Kings Building 2   \n",
       "6      6 2018-09-16 2018-09-16       366               252  Kings Buildings 1   \n",
       "7      7 2018-09-16 2018-09-16      1094               254   Kings Building 3   \n",
       "8      8 2018-09-16 2018-09-16      1025               254   Kings Building 3   \n",
       "9      9 2018-09-16 2018-09-16        72               264      Pollock Halls   \n",
       "\n",
       "          start_station_description  start_station_latitude  \\\n",
       "0  North Corner of Charlotte Square               55.952335   \n",
       "1                 North East corner               55.954749   \n",
       "2                      near Tesco's               55.962804   \n",
       "3                          X-Y Cafe               55.922001   \n",
       "4                          X-Y Cafe               55.922001   \n",
       "5                Sanderson Building               55.923202   \n",
       "6                   Grant Institute               55.924185   \n",
       "7              Kings Building House               55.923479   \n",
       "8              Kings Building House               55.923479   \n",
       "9            Pollock Halls Entrance               55.939963   \n",
       "\n",
       "   start_station_longitude  end_station_id   end_station_name  \\\n",
       "0                -3.207101             259   St Andrew Square   \n",
       "1                -3.192774             262         Canonmills   \n",
       "2                -3.196284             250      Victoria Quay   \n",
       "3                -3.176902             254   Kings Building 3   \n",
       "4                -3.176902             253   Kings Building 2   \n",
       "5                -3.171646             252  Kings Buildings 1   \n",
       "6                -3.173831             254   Kings Building 3   \n",
       "7                -3.175385             264      Pollock Halls   \n",
       "8                -3.175385             264      Pollock Halls   \n",
       "9                -3.171586             264      Pollock Halls   \n",
       "\n",
       "                  end_station_description  end_station_latitude  \\\n",
       "0                       North East corner             55.954728   \n",
       "1                            near Tesco's             55.962804   \n",
       "2  Entrance to Scottish Government Office             55.977638   \n",
       "3                    Kings Building House             55.923479   \n",
       "4                      Sanderson Building             55.923202   \n",
       "5                         Grant Institute             55.924185   \n",
       "6                    Kings Building House             55.923479   \n",
       "7                  Pollock Halls Entrance             55.939963   \n",
       "8                  Pollock Halls Entrance             55.939963   \n",
       "9                  Pollock Halls Entrance             55.939963   \n",
       "\n",
       "   end_station_longitude  weekday  month  \n",
       "0              -3.192653        5      9  \n",
       "1              -3.196284        5      9  \n",
       "2              -3.174116        5      9  \n",
       "3              -3.175385        6      9  \n",
       "4              -3.171646        6      9  \n",
       "5              -3.173831        6      9  \n",
       "6              -3.175385        6      9  \n",
       "7              -3.171586        6      9  \n",
       "8              -3.171586        6      9  \n",
       "9              -3.171586        6      9  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes_df[\"started_at\"] = pd.to_datetime(bikes_df[\"started_at\"])\n",
    "bikes_df[\"ended_at\"] = pd.to_datetime(bikes_df[\"ended_at\"])\n",
    "bikes_df[\"weekday\"] = bikes_df[\"started_at\"].dt.weekday\n",
    "bikes_df[\"month\"] = bikes_df[\"started_at\"].dt.month\n",
    "bikes_df.head(10)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "24f7fcaa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>duration</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_description</th>\n",
       "      <th>start_station_latitude</th>\n",
       "      <th>start_station_longitude</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>end_station_name</th>\n",
       "      <th>end_station_description</th>\n",
       "      <th>end_station_latitude</th>\n",
       "      <th>end_station_longitude</th>\n",
       "      <th>weekday</th>\n",
       "      <th>month</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>just_date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-09-15</th>\n",
       "      <td>0</td>\n",
       "      <td>2018-09-15</td>\n",
       "      <td>2018-09-15</td>\n",
       "      <td>1182</td>\n",
       "      <td>247</td>\n",
       "      <td>Charlotte Square</td>\n",
       "      <td>North Corner of Charlotte Square</td>\n",
       "      <td>55.952335</td>\n",
       "      <td>-3.207101</td>\n",
       "      <td>259</td>\n",
       "      <td>St Andrew Square</td>\n",
       "      <td>North East corner</td>\n",
       "      <td>55.954728</td>\n",
       "      <td>-3.192653</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-15</th>\n",
       "      <td>1</td>\n",
       "      <td>2018-09-15</td>\n",
       "      <td>2018-09-15</td>\n",
       "      <td>995</td>\n",
       "      <td>259</td>\n",
       "      <td>St Andrew Square</td>\n",
       "      <td>North East corner</td>\n",
       "      <td>55.954749</td>\n",
       "      <td>-3.192774</td>\n",
       "      <td>262</td>\n",
       "      <td>Canonmills</td>\n",
       "      <td>near Tesco's</td>\n",
       "      <td>55.962804</td>\n",
       "      <td>-3.196284</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-15</th>\n",
       "      <td>2</td>\n",
       "      <td>2018-09-15</td>\n",
       "      <td>2018-09-15</td>\n",
       "      <td>3466</td>\n",
       "      <td>262</td>\n",
       "      <td>Canonmills</td>\n",
       "      <td>near Tesco's</td>\n",
       "      <td>55.962804</td>\n",
       "      <td>-3.196284</td>\n",
       "      <td>250</td>\n",
       "      <td>Victoria Quay</td>\n",
       "      <td>Entrance to Scottish Government Office</td>\n",
       "      <td>55.977638</td>\n",
       "      <td>-3.174116</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-16</th>\n",
       "      <td>3</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>1430</td>\n",
       "      <td>255</td>\n",
       "      <td>Kings Buildings 4</td>\n",
       "      <td>X-Y Cafe</td>\n",
       "      <td>55.922001</td>\n",
       "      <td>-3.176902</td>\n",
       "      <td>254</td>\n",
       "      <td>Kings Building 3</td>\n",
       "      <td>Kings Building House</td>\n",
       "      <td>55.923479</td>\n",
       "      <td>-3.175385</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-16</th>\n",
       "      <td>4</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>452</td>\n",
       "      <td>255</td>\n",
       "      <td>Kings Buildings 4</td>\n",
       "      <td>X-Y Cafe</td>\n",
       "      <td>55.922001</td>\n",
       "      <td>-3.176902</td>\n",
       "      <td>253</td>\n",
       "      <td>Kings Building 2</td>\n",
       "      <td>Sanderson Building</td>\n",
       "      <td>55.923202</td>\n",
       "      <td>-3.171646</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-16</th>\n",
       "      <td>5</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>228</td>\n",
       "      <td>253</td>\n",
       "      <td>Kings Building 2</td>\n",
       "      <td>Sanderson Building</td>\n",
       "      <td>55.923202</td>\n",
       "      <td>-3.171646</td>\n",
       "      <td>252</td>\n",
       "      <td>Kings Buildings 1</td>\n",
       "      <td>Grant Institute</td>\n",
       "      <td>55.924185</td>\n",
       "      <td>-3.173831</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-16</th>\n",
       "      <td>6</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>366</td>\n",
       "      <td>252</td>\n",
       "      <td>Kings Buildings 1</td>\n",
       "      <td>Grant Institute</td>\n",
       "      <td>55.924185</td>\n",
       "      <td>-3.173831</td>\n",
       "      <td>254</td>\n",
       "      <td>Kings Building 3</td>\n",
       "      <td>Kings Building House</td>\n",
       "      <td>55.923479</td>\n",
       "      <td>-3.175385</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-16</th>\n",
       "      <td>7</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>1094</td>\n",
       "      <td>254</td>\n",
       "      <td>Kings Building 3</td>\n",
       "      <td>Kings Building House</td>\n",
       "      <td>55.923479</td>\n",
       "      <td>-3.175385</td>\n",
       "      <td>264</td>\n",
       "      <td>Pollock Halls</td>\n",
       "      <td>Pollock Halls Entrance</td>\n",
       "      <td>55.939963</td>\n",
       "      <td>-3.171586</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-16</th>\n",
       "      <td>8</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>1025</td>\n",
       "      <td>254</td>\n",
       "      <td>Kings Building 3</td>\n",
       "      <td>Kings Building House</td>\n",
       "      <td>55.923479</td>\n",
       "      <td>-3.175385</td>\n",
       "      <td>264</td>\n",
       "      <td>Pollock Halls</td>\n",
       "      <td>Pollock Halls Entrance</td>\n",
       "      <td>55.939963</td>\n",
       "      <td>-3.171586</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-16</th>\n",
       "      <td>9</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>72</td>\n",
       "      <td>264</td>\n",
       "      <td>Pollock Halls</td>\n",
       "      <td>Pollock Halls Entrance</td>\n",
       "      <td>55.939963</td>\n",
       "      <td>-3.171586</td>\n",
       "      <td>264</td>\n",
       "      <td>Pollock Halls</td>\n",
       "      <td>Pollock Halls Entrance</td>\n",
       "      <td>55.939963</td>\n",
       "      <td>-3.171586</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            index started_at   ended_at  duration  start_station_id  \\\n",
       "just_date                                                             \n",
       "2018-09-15      0 2018-09-15 2018-09-15      1182               247   \n",
       "2018-09-15      1 2018-09-15 2018-09-15       995               259   \n",
       "2018-09-15      2 2018-09-15 2018-09-15      3466               262   \n",
       "2018-09-16      3 2018-09-16 2018-09-16      1430               255   \n",
       "2018-09-16      4 2018-09-16 2018-09-16       452               255   \n",
       "2018-09-16      5 2018-09-16 2018-09-16       228               253   \n",
       "2018-09-16      6 2018-09-16 2018-09-16       366               252   \n",
       "2018-09-16      7 2018-09-16 2018-09-16      1094               254   \n",
       "2018-09-16      8 2018-09-16 2018-09-16      1025               254   \n",
       "2018-09-16      9 2018-09-16 2018-09-16        72               264   \n",
       "\n",
       "           start_station_name         start_station_description  \\\n",
       "just_date                                                         \n",
       "2018-09-15   Charlotte Square  North Corner of Charlotte Square   \n",
       "2018-09-15   St Andrew Square                 North East corner   \n",
       "2018-09-15         Canonmills                      near Tesco's   \n",
       "2018-09-16  Kings Buildings 4                          X-Y Cafe   \n",
       "2018-09-16  Kings Buildings 4                          X-Y Cafe   \n",
       "2018-09-16   Kings Building 2                Sanderson Building   \n",
       "2018-09-16  Kings Buildings 1                   Grant Institute   \n",
       "2018-09-16   Kings Building 3              Kings Building House   \n",
       "2018-09-16   Kings Building 3              Kings Building House   \n",
       "2018-09-16      Pollock Halls            Pollock Halls Entrance   \n",
       "\n",
       "            start_station_latitude  start_station_longitude  end_station_id  \\\n",
       "just_date                                                                     \n",
       "2018-09-15               55.952335                -3.207101             259   \n",
       "2018-09-15               55.954749                -3.192774             262   \n",
       "2018-09-15               55.962804                -3.196284             250   \n",
       "2018-09-16               55.922001                -3.176902             254   \n",
       "2018-09-16               55.922001                -3.176902             253   \n",
       "2018-09-16               55.923202                -3.171646             252   \n",
       "2018-09-16               55.924185                -3.173831             254   \n",
       "2018-09-16               55.923479                -3.175385             264   \n",
       "2018-09-16               55.923479                -3.175385             264   \n",
       "2018-09-16               55.939963                -3.171586             264   \n",
       "\n",
       "             end_station_name                 end_station_description  \\\n",
       "just_date                                                               \n",
       "2018-09-15   St Andrew Square                       North East corner   \n",
       "2018-09-15         Canonmills                            near Tesco's   \n",
       "2018-09-15      Victoria Quay  Entrance to Scottish Government Office   \n",
       "2018-09-16   Kings Building 3                    Kings Building House   \n",
       "2018-09-16   Kings Building 2                      Sanderson Building   \n",
       "2018-09-16  Kings Buildings 1                         Grant Institute   \n",
       "2018-09-16   Kings Building 3                    Kings Building House   \n",
       "2018-09-16      Pollock Halls                  Pollock Halls Entrance   \n",
       "2018-09-16      Pollock Halls                  Pollock Halls Entrance   \n",
       "2018-09-16      Pollock Halls                  Pollock Halls Entrance   \n",
       "\n",
       "            end_station_latitude  end_station_longitude  weekday  month  \n",
       "just_date                                                                \n",
       "2018-09-15             55.954728              -3.192653        5      9  \n",
       "2018-09-15             55.962804              -3.196284        5      9  \n",
       "2018-09-15             55.977638              -3.174116        5      9  \n",
       "2018-09-16             55.923479              -3.175385        6      9  \n",
       "2018-09-16             55.923202              -3.171646        6      9  \n",
       "2018-09-16             55.924185              -3.173831        6      9  \n",
       "2018-09-16             55.923479              -3.175385        6      9  \n",
       "2018-09-16             55.939963              -3.171586        6      9  \n",
       "2018-09-16             55.939963              -3.171586        6      9  \n",
       "2018-09-16             55.939963              -3.171586        6      9  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bikes_df[\"just_date\"] = bikes_df[\"started_at\"].dt.date\n",
    "b_df = bikes_df.set_index(\"just_date\")\n",
    "b_df.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e84c1833",
   "metadata": {},
   "source": [
    "Nastavení indexu DataFrame "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "4af74bbc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>started_at</th>\n",
       "      <th>ended_at</th>\n",
       "      <th>duration</th>\n",
       "      <th>start_station_id</th>\n",
       "      <th>start_station_name</th>\n",
       "      <th>start_station_description</th>\n",
       "      <th>start_station_latitude</th>\n",
       "      <th>start_station_longitude</th>\n",
       "      <th>end_station_id</th>\n",
       "      <th>end_station_name</th>\n",
       "      <th>end_station_description</th>\n",
       "      <th>end_station_latitude</th>\n",
       "      <th>end_station_longitude</th>\n",
       "      <th>weekday</th>\n",
       "      <th>month</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>just_date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-09-15</th>\n",
       "      <td>0</td>\n",
       "      <td>2018-09-15</td>\n",
       "      <td>2018-09-15</td>\n",
       "      <td>1182</td>\n",
       "      <td>247</td>\n",
       "      <td>Charlotte Square</td>\n",
       "      <td>North Corner of Charlotte Square</td>\n",
       "      <td>55.952335</td>\n",
       "      <td>-3.207101</td>\n",
       "      <td>259</td>\n",
       "      <td>St Andrew Square</td>\n",
       "      <td>North East corner</td>\n",
       "      <td>55.954728</td>\n",
       "      <td>-3.192653</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-15</th>\n",
       "      <td>1</td>\n",
       "      <td>2018-09-15</td>\n",
       "      <td>2018-09-15</td>\n",
       "      <td>995</td>\n",
       "      <td>259</td>\n",
       "      <td>St Andrew Square</td>\n",
       "      <td>North East corner</td>\n",
       "      <td>55.954749</td>\n",
       "      <td>-3.192774</td>\n",
       "      <td>262</td>\n",
       "      <td>Canonmills</td>\n",
       "      <td>near Tesco's</td>\n",
       "      <td>55.962804</td>\n",
       "      <td>-3.196284</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-15</th>\n",
       "      <td>2</td>\n",
       "      <td>2018-09-15</td>\n",
       "      <td>2018-09-15</td>\n",
       "      <td>3466</td>\n",
       "      <td>262</td>\n",
       "      <td>Canonmills</td>\n",
       "      <td>near Tesco's</td>\n",
       "      <td>55.962804</td>\n",
       "      <td>-3.196284</td>\n",
       "      <td>250</td>\n",
       "      <td>Victoria Quay</td>\n",
       "      <td>Entrance to Scottish Government Office</td>\n",
       "      <td>55.977638</td>\n",
       "      <td>-3.174116</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-16</th>\n",
       "      <td>3</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>1430</td>\n",
       "      <td>255</td>\n",
       "      <td>Kings Buildings 4</td>\n",
       "      <td>X-Y Cafe</td>\n",
       "      <td>55.922001</td>\n",
       "      <td>-3.176902</td>\n",
       "      <td>254</td>\n",
       "      <td>Kings Building 3</td>\n",
       "      <td>Kings Building House</td>\n",
       "      <td>55.923479</td>\n",
       "      <td>-3.175385</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-16</th>\n",
       "      <td>4</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>452</td>\n",
       "      <td>255</td>\n",
       "      <td>Kings Buildings 4</td>\n",
       "      <td>X-Y Cafe</td>\n",
       "      <td>55.922001</td>\n",
       "      <td>-3.176902</td>\n",
       "      <td>253</td>\n",
       "      <td>Kings Building 2</td>\n",
       "      <td>Sanderson Building</td>\n",
       "      <td>55.923202</td>\n",
       "      <td>-3.171646</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-16</th>\n",
       "      <td>5</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>228</td>\n",
       "      <td>253</td>\n",
       "      <td>Kings Building 2</td>\n",
       "      <td>Sanderson Building</td>\n",
       "      <td>55.923202</td>\n",
       "      <td>-3.171646</td>\n",
       "      <td>252</td>\n",
       "      <td>Kings Buildings 1</td>\n",
       "      <td>Grant Institute</td>\n",
       "      <td>55.924185</td>\n",
       "      <td>-3.173831</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-16</th>\n",
       "      <td>6</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>366</td>\n",
       "      <td>252</td>\n",
       "      <td>Kings Buildings 1</td>\n",
       "      <td>Grant Institute</td>\n",
       "      <td>55.924185</td>\n",
       "      <td>-3.173831</td>\n",
       "      <td>254</td>\n",
       "      <td>Kings Building 3</td>\n",
       "      <td>Kings Building House</td>\n",
       "      <td>55.923479</td>\n",
       "      <td>-3.175385</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-16</th>\n",
       "      <td>7</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>1094</td>\n",
       "      <td>254</td>\n",
       "      <td>Kings Building 3</td>\n",
       "      <td>Kings Building House</td>\n",
       "      <td>55.923479</td>\n",
       "      <td>-3.175385</td>\n",
       "      <td>264</td>\n",
       "      <td>Pollock Halls</td>\n",
       "      <td>Pollock Halls Entrance</td>\n",
       "      <td>55.939963</td>\n",
       "      <td>-3.171586</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-16</th>\n",
       "      <td>8</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>1025</td>\n",
       "      <td>254</td>\n",
       "      <td>Kings Building 3</td>\n",
       "      <td>Kings Building House</td>\n",
       "      <td>55.923479</td>\n",
       "      <td>-3.175385</td>\n",
       "      <td>264</td>\n",
       "      <td>Pollock Halls</td>\n",
       "      <td>Pollock Halls Entrance</td>\n",
       "      <td>55.939963</td>\n",
       "      <td>-3.171586</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-16</th>\n",
       "      <td>9</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>2018-09-16</td>\n",
       "      <td>72</td>\n",
       "      <td>264</td>\n",
       "      <td>Pollock Halls</td>\n",
       "      <td>Pollock Halls Entrance</td>\n",
       "      <td>55.939963</td>\n",
       "      <td>-3.171586</td>\n",
       "      <td>264</td>\n",
       "      <td>Pollock Halls</td>\n",
       "      <td>Pollock Halls Entrance</td>\n",
       "      <td>55.939963</td>\n",
       "      <td>-3.171586</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            index started_at   ended_at  duration  start_station_id  \\\n",
       "just_date                                                             \n",
       "2018-09-15      0 2018-09-15 2018-09-15      1182               247   \n",
       "2018-09-15      1 2018-09-15 2018-09-15       995               259   \n",
       "2018-09-15      2 2018-09-15 2018-09-15      3466               262   \n",
       "2018-09-16      3 2018-09-16 2018-09-16      1430               255   \n",
       "2018-09-16      4 2018-09-16 2018-09-16       452               255   \n",
       "2018-09-16      5 2018-09-16 2018-09-16       228               253   \n",
       "2018-09-16      6 2018-09-16 2018-09-16       366               252   \n",
       "2018-09-16      7 2018-09-16 2018-09-16      1094               254   \n",
       "2018-09-16      8 2018-09-16 2018-09-16      1025               254   \n",
       "2018-09-16      9 2018-09-16 2018-09-16        72               264   \n",
       "\n",
       "           start_station_name         start_station_description  \\\n",
       "just_date                                                         \n",
       "2018-09-15   Charlotte Square  North Corner of Charlotte Square   \n",
       "2018-09-15   St Andrew Square                 North East corner   \n",
       "2018-09-15         Canonmills                      near Tesco's   \n",
       "2018-09-16  Kings Buildings 4                          X-Y Cafe   \n",
       "2018-09-16  Kings Buildings 4                          X-Y Cafe   \n",
       "2018-09-16   Kings Building 2                Sanderson Building   \n",
       "2018-09-16  Kings Buildings 1                   Grant Institute   \n",
       "2018-09-16   Kings Building 3              Kings Building House   \n",
       "2018-09-16   Kings Building 3              Kings Building House   \n",
       "2018-09-16      Pollock Halls            Pollock Halls Entrance   \n",
       "\n",
       "            start_station_latitude  start_station_longitude  end_station_id  \\\n",
       "just_date                                                                     \n",
       "2018-09-15               55.952335                -3.207101             259   \n",
       "2018-09-15               55.954749                -3.192774             262   \n",
       "2018-09-15               55.962804                -3.196284             250   \n",
       "2018-09-16               55.922001                -3.176902             254   \n",
       "2018-09-16               55.922001                -3.176902             253   \n",
       "2018-09-16               55.923202                -3.171646             252   \n",
       "2018-09-16               55.924185                -3.173831             254   \n",
       "2018-09-16               55.923479                -3.175385             264   \n",
       "2018-09-16               55.923479                -3.175385             264   \n",
       "2018-09-16               55.939963                -3.171586             264   \n",
       "\n",
       "             end_station_name                 end_station_description  \\\n",
       "just_date                                                               \n",
       "2018-09-15   St Andrew Square                       North East corner   \n",
       "2018-09-15         Canonmills                            near Tesco's   \n",
       "2018-09-15      Victoria Quay  Entrance to Scottish Government Office   \n",
       "2018-09-16   Kings Building 3                    Kings Building House   \n",
       "2018-09-16   Kings Building 2                      Sanderson Building   \n",
       "2018-09-16  Kings Buildings 1                         Grant Institute   \n",
       "2018-09-16   Kings Building 3                    Kings Building House   \n",
       "2018-09-16      Pollock Halls                  Pollock Halls Entrance   \n",
       "2018-09-16      Pollock Halls                  Pollock Halls Entrance   \n",
       "2018-09-16      Pollock Halls                  Pollock Halls Entrance   \n",
       "\n",
       "            end_station_latitude  end_station_longitude  weekday  month  \n",
       "just_date                                                                \n",
       "2018-09-15             55.954728              -3.192653        5      9  \n",
       "2018-09-15             55.962804              -3.196284        5      9  \n",
       "2018-09-15             55.977638              -3.174116        5      9  \n",
       "2018-09-16             55.923479              -3.175385        6      9  \n",
       "2018-09-16             55.923202              -3.171646        6      9  \n",
       "2018-09-16             55.924185              -3.173831        6      9  \n",
       "2018-09-16             55.923479              -3.175385        6      9  \n",
       "2018-09-16             55.939963              -3.171586        6      9  \n",
       "2018-09-16             55.939963              -3.171586        6      9  \n",
       "2018-09-16             55.939963              -3.171586        6      9  "
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "demand_df = bikes_df.set_index(\"just_date\")\n",
    "demand_df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "460ef57d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>just_date</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-09-15</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-16</th>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-17</th>\n",
       "      <td>403</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-18</th>\n",
       "      <td>126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-19</th>\n",
       "      <td>77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-06-26</th>\n",
       "      <td>319</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-06-27</th>\n",
       "      <td>523</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-06-28</th>\n",
       "      <td>293</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-06-29</th>\n",
       "      <td>405</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-06-30</th>\n",
       "      <td>380</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1020 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            index\n",
       "just_date        \n",
       "2018-09-15      3\n",
       "2018-09-16     10\n",
       "2018-09-17    403\n",
       "2018-09-18    126\n",
       "2018-09-19     77\n",
       "...           ...\n",
       "2021-06-26    319\n",
       "2021-06-27    523\n",
       "2021-06-28    293\n",
       "2021-06-29    405\n",
       "2021-06-30    380\n",
       "\n",
       "[1020 rows x 1 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "demand_df = demand_df.groupby(\"just_date\").count()\n",
    "demand_df[[\"index\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "4c5e8b3e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "figure(num=1, figsize=(20, 8))\n",
    "plt.plot(demand_df.index, demand_df[\"index\"], color = \"blue\")\n",
    "plt.xlabel(\"Date\")\n",
    "plt.title(\"Bicycle rentals on time\", fontsize=20)\n",
    "plt.ylabel(\"Number of loans\", fontsize=12)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a32dfb84",
   "metadata": {},
   "source": [
    "# 9. IDENTIFIKACE PŘIČINY VÝKYVŮ POPTÁVKY"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4241b85",
   "metadata": {},
   "source": [
    "Vytvoření tabulku, kde budou zaznamenány čaové údaje"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9cf9b6ef",
   "metadata": {},
   "source": [
    "Načtení tabulky Edingurgh weather\n",
    "Vytvoření tabulky se záznamy o počasí a její upravení"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "562e765e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>time</th>\n",
       "      <th>temp</th>\n",
       "      <th>feels</th>\n",
       "      <th>wind</th>\n",
       "      <th>gust</th>\n",
       "      <th>rain</th>\n",
       "      <th>humidity</th>\n",
       "      <th>cloud</th>\n",
       "      <th>pressure</th>\n",
       "      <th>vis</th>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>00:00</td>\n",
       "      <td>11 °c</td>\n",
       "      <td>11 °c</td>\n",
       "      <td>9 km/h from S</td>\n",
       "      <td>19 km/h</td>\n",
       "      <td>0.0 mm</td>\n",
       "      <td>79%</td>\n",
       "      <td>13%</td>\n",
       "      <td>1020 mb</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>2018-09-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>03:00</td>\n",
       "      <td>13 °c</td>\n",
       "      <td>12 °c</td>\n",
       "      <td>11 km/h from SSW</td>\n",
       "      <td>19 km/h</td>\n",
       "      <td>0.0 mm</td>\n",
       "      <td>76%</td>\n",
       "      <td>96%</td>\n",
       "      <td>1020 mb</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>2018-09-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>06:00</td>\n",
       "      <td>14 °c</td>\n",
       "      <td>13 °c</td>\n",
       "      <td>11 km/h from SSW</td>\n",
       "      <td>19 km/h</td>\n",
       "      <td>0.0 mm</td>\n",
       "      <td>84%</td>\n",
       "      <td>100%</td>\n",
       "      <td>1020 mb</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>2018-09-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>09:00</td>\n",
       "      <td>14 °c</td>\n",
       "      <td>13 °c</td>\n",
       "      <td>14 km/h from SSW</td>\n",
       "      <td>23 km/h</td>\n",
       "      <td>0.1 mm</td>\n",
       "      <td>88%</td>\n",
       "      <td>78%</td>\n",
       "      <td>1021 mb</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>2018-09-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12:00</td>\n",
       "      <td>16 °c</td>\n",
       "      <td>16 °c</td>\n",
       "      <td>15 km/h from SSW</td>\n",
       "      <td>22 km/h</td>\n",
       "      <td>0.0 mm</td>\n",
       "      <td>87%</td>\n",
       "      <td>87%</td>\n",
       "      <td>1021 mb</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>2018-09-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>15:00</td>\n",
       "      <td>17 °c</td>\n",
       "      <td>17 °c</td>\n",
       "      <td>14 km/h from SW</td>\n",
       "      <td>21 km/h</td>\n",
       "      <td>0.0 mm</td>\n",
       "      <td>83%</td>\n",
       "      <td>97%</td>\n",
       "      <td>1021 mb</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>2018-09-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>18:00</td>\n",
       "      <td>16 °c</td>\n",
       "      <td>16 °c</td>\n",
       "      <td>12 km/h from SW</td>\n",
       "      <td>19 km/h</td>\n",
       "      <td>0.0 mm</td>\n",
       "      <td>88%</td>\n",
       "      <td>98%</td>\n",
       "      <td>1022 mb</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>2018-09-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>21:00</td>\n",
       "      <td>14 °c</td>\n",
       "      <td>14 °c</td>\n",
       "      <td>11 km/h from SSW</td>\n",
       "      <td>19 km/h</td>\n",
       "      <td>0.0 mm</td>\n",
       "      <td>94%</td>\n",
       "      <td>52%</td>\n",
       "      <td>1022 mb</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>2018-09-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>00:00</td>\n",
       "      <td>13 °c</td>\n",
       "      <td>13 °c</td>\n",
       "      <td>10 km/h from SSW</td>\n",
       "      <td>19 km/h</td>\n",
       "      <td>0.0 mm</td>\n",
       "      <td>95%</td>\n",
       "      <td>31%</td>\n",
       "      <td>1022 mb</td>\n",
       "      <td>Poor</td>\n",
       "      <td>2018-09-02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>03:00</td>\n",
       "      <td>13 °c</td>\n",
       "      <td>13 °c</td>\n",
       "      <td>8 km/h from SSW</td>\n",
       "      <td>15 km/h</td>\n",
       "      <td>0.0 mm</td>\n",
       "      <td>96%</td>\n",
       "      <td>52%</td>\n",
       "      <td>1020 mb</td>\n",
       "      <td>Poor</td>\n",
       "      <td>2018-09-02</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    time   temp  feels              wind     gust    rain humidity cloud  \\\n",
       "0  00:00  11 °c  11 °c     9 km/h from S  19 km/h  0.0 mm      79%   13%   \n",
       "1  03:00  13 °c  12 °c  11 km/h from SSW  19 km/h  0.0 mm      76%   96%   \n",
       "2  06:00  14 °c  13 °c  11 km/h from SSW  19 km/h  0.0 mm      84%  100%   \n",
       "3  09:00  14 °c  13 °c  14 km/h from SSW  23 km/h  0.1 mm      88%   78%   \n",
       "4  12:00  16 °c  16 °c  15 km/h from SSW  22 km/h  0.0 mm      87%   87%   \n",
       "5  15:00  17 °c  17 °c   14 km/h from SW  21 km/h  0.0 mm      83%   97%   \n",
       "6  18:00  16 °c  16 °c   12 km/h from SW  19 km/h  0.0 mm      88%   98%   \n",
       "7  21:00  14 °c  14 °c  11 km/h from SSW  19 km/h  0.0 mm      94%   52%   \n",
       "8  00:00  13 °c  13 °c  10 km/h from SSW  19 km/h  0.0 mm      95%   31%   \n",
       "9  03:00  13 °c  13 °c   8 km/h from SSW  15 km/h  0.0 mm      96%   52%   \n",
       "\n",
       "  pressure        vis        date  \n",
       "0  1020 mb  Excellent  2018-09-01  \n",
       "1  1020 mb  Excellent  2018-09-01  \n",
       "2  1020 mb  Excellent  2018-09-01  \n",
       "3  1021 mb  Excellent  2018-09-01  \n",
       "4  1021 mb  Excellent  2018-09-01  \n",
       "5  1021 mb  Excellent  2018-09-01  \n",
       "6  1022 mb  Excellent  2018-09-01  \n",
       "7  1022 mb  Excellent  2018-09-01  \n",
       "8  1022 mb       Poor  2018-09-02  \n",
       "9  1020 mb       Poor  2018-09-02  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weather_df = pd.read_sql(\"select * from edinburgh_weather\", engeto_data_conn)\n",
    "weather_df.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59280ff2",
   "metadata": {},
   "source": [
    "# 10. VLIV POČASÍ NA POPTÁVKU PO KOLECH"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "bfaf41a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>temp</th>\n",
       "      <th>feels</th>\n",
       "      <th>wind</th>\n",
       "      <th>gust</th>\n",
       "      <th>rain</th>\n",
       "      <th>humidity</th>\n",
       "      <th>cloud</th>\n",
       "      <th>pressure</th>\n",
       "      <th>vis</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"8\" valign=\"top\">2018-09-01</th>\n",
       "      <th>0</th>\n",
       "      <td>11 °c</td>\n",
       "      <td>11 °c</td>\n",
       "      <td>9 km/h from S</td>\n",
       "      <td>19 km/h</td>\n",
       "      <td>0.0 mm</td>\n",
       "      <td>79%</td>\n",
       "      <td>13%</td>\n",
       "      <td>1020 mb</td>\n",
       "      <td>Excellent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>13 °c</td>\n",
       "      <td>12 °c</td>\n",
       "      <td>11 km/h from SSW</td>\n",
       "      <td>19 km/h</td>\n",
       "      <td>0.0 mm</td>\n",
       "      <td>76%</td>\n",
       "      <td>96%</td>\n",
       "      <td>1020 mb</td>\n",
       "      <td>Excellent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>14 °c</td>\n",
       "      <td>13 °c</td>\n",
       "      <td>11 km/h from SSW</td>\n",
       "      <td>19 km/h</td>\n",
       "      <td>0.0 mm</td>\n",
       "      <td>84%</td>\n",
       "      <td>100%</td>\n",
       "      <td>1020 mb</td>\n",
       "      <td>Excellent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>14 °c</td>\n",
       "      <td>13 °c</td>\n",
       "      <td>14 km/h from SSW</td>\n",
       "      <td>23 km/h</td>\n",
       "      <td>0.1 mm</td>\n",
       "      <td>88%</td>\n",
       "      <td>78%</td>\n",
       "      <td>1021 mb</td>\n",
       "      <td>Excellent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>16 °c</td>\n",
       "      <td>16 °c</td>\n",
       "      <td>15 km/h from SSW</td>\n",
       "      <td>22 km/h</td>\n",
       "      <td>0.0 mm</td>\n",
       "      <td>87%</td>\n",
       "      <td>87%</td>\n",
       "      <td>1021 mb</td>\n",
       "      <td>Excellent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>17 °c</td>\n",
       "      <td>17 °c</td>\n",
       "      <td>14 km/h from SW</td>\n",
       "      <td>21 km/h</td>\n",
       "      <td>0.0 mm</td>\n",
       "      <td>83%</td>\n",
       "      <td>97%</td>\n",
       "      <td>1021 mb</td>\n",
       "      <td>Excellent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>16 °c</td>\n",
       "      <td>16 °c</td>\n",
       "      <td>12 km/h from SW</td>\n",
       "      <td>19 km/h</td>\n",
       "      <td>0.0 mm</td>\n",
       "      <td>88%</td>\n",
       "      <td>98%</td>\n",
       "      <td>1022 mb</td>\n",
       "      <td>Excellent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>14 °c</td>\n",
       "      <td>14 °c</td>\n",
       "      <td>11 km/h from SSW</td>\n",
       "      <td>19 km/h</td>\n",
       "      <td>0.0 mm</td>\n",
       "      <td>94%</td>\n",
       "      <td>52%</td>\n",
       "      <td>1022 mb</td>\n",
       "      <td>Excellent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"8\" valign=\"top\">2018-09-02</th>\n",
       "      <th>0</th>\n",
       "      <td>13 °c</td>\n",
       "      <td>13 °c</td>\n",
       "      <td>10 km/h from SSW</td>\n",
       "      <td>19 km/h</td>\n",
       "      <td>0.0 mm</td>\n",
       "      <td>95%</td>\n",
       "      <td>31%</td>\n",
       "      <td>1022 mb</td>\n",
       "      <td>Poor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>13 °c</td>\n",
       "      <td>13 °c</td>\n",
       "      <td>8 km/h from SSW</td>\n",
       "      <td>15 km/h</td>\n",
       "      <td>0.0 mm</td>\n",
       "      <td>96%</td>\n",
       "      <td>52%</td>\n",
       "      <td>1020 mb</td>\n",
       "      <td>Poor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>14 °c</td>\n",
       "      <td>15 °c</td>\n",
       "      <td>5 km/h from SE</td>\n",
       "      <td>9 km/h</td>\n",
       "      <td>0.0 mm</td>\n",
       "      <td>95%</td>\n",
       "      <td>67%</td>\n",
       "      <td>1020 mb</td>\n",
       "      <td>Poor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>19 °c</td>\n",
       "      <td>19 °c</td>\n",
       "      <td>18 km/h from SSW</td>\n",
       "      <td>28 km/h</td>\n",
       "      <td>0.0 mm</td>\n",
       "      <td>82%</td>\n",
       "      <td>80%</td>\n",
       "      <td>1020 mb</td>\n",
       "      <td>Excellent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>20 °c</td>\n",
       "      <td>20 °c</td>\n",
       "      <td>21 km/h from SSW</td>\n",
       "      <td>30 km/h</td>\n",
       "      <td>0.0 mm</td>\n",
       "      <td>78%</td>\n",
       "      <td>93%</td>\n",
       "      <td>1019 mb</td>\n",
       "      <td>Excellent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>19 °c</td>\n",
       "      <td>19 °c</td>\n",
       "      <td>19 km/h from SSW</td>\n",
       "      <td>30 km/h</td>\n",
       "      <td>0.1 mm</td>\n",
       "      <td>82%</td>\n",
       "      <td>90%</td>\n",
       "      <td>1019 mb</td>\n",
       "      <td>Excellent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>18 °c</td>\n",
       "      <td>18 °c</td>\n",
       "      <td>12 km/h from SW</td>\n",
       "      <td>20 km/h</td>\n",
       "      <td>0.0 mm</td>\n",
       "      <td>84%</td>\n",
       "      <td>70%</td>\n",
       "      <td>1019 mb</td>\n",
       "      <td>Excellent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>16 °c</td>\n",
       "      <td>16 °c</td>\n",
       "      <td>10 km/h from SSW</td>\n",
       "      <td>17 km/h</td>\n",
       "      <td>0.3 mm</td>\n",
       "      <td>91%</td>\n",
       "      <td>82%</td>\n",
       "      <td>1020 mb</td>\n",
       "      <td>Poor</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  temp  feels              wind     gust    rain humidity  \\\n",
       "date       time                                                             \n",
       "2018-09-01 0     11 °c  11 °c     9 km/h from S  19 km/h  0.0 mm      79%   \n",
       "           3     13 °c  12 °c  11 km/h from SSW  19 km/h  0.0 mm      76%   \n",
       "           6     14 °c  13 °c  11 km/h from SSW  19 km/h  0.0 mm      84%   \n",
       "           9     14 °c  13 °c  14 km/h from SSW  23 km/h  0.1 mm      88%   \n",
       "           12    16 °c  16 °c  15 km/h from SSW  22 km/h  0.0 mm      87%   \n",
       "           15    17 °c  17 °c   14 km/h from SW  21 km/h  0.0 mm      83%   \n",
       "           18    16 °c  16 °c   12 km/h from SW  19 km/h  0.0 mm      88%   \n",
       "           21    14 °c  14 °c  11 km/h from SSW  19 km/h  0.0 mm      94%   \n",
       "2018-09-02 0     13 °c  13 °c  10 km/h from SSW  19 km/h  0.0 mm      95%   \n",
       "           3     13 °c  13 °c   8 km/h from SSW  15 km/h  0.0 mm      96%   \n",
       "           6     14 °c  15 °c    5 km/h from SE   9 km/h  0.0 mm      95%   \n",
       "           9     19 °c  19 °c  18 km/h from SSW  28 km/h  0.0 mm      82%   \n",
       "           12    20 °c  20 °c  21 km/h from SSW  30 km/h  0.0 mm      78%   \n",
       "           15    19 °c  19 °c  19 km/h from SSW  30 km/h  0.1 mm      82%   \n",
       "           18    18 °c  18 °c   12 km/h from SW  20 km/h  0.0 mm      84%   \n",
       "           21    16 °c  16 °c  10 km/h from SSW  17 km/h  0.3 mm      91%   \n",
       "\n",
       "                cloud pressure        vis  \n",
       "date       time                            \n",
       "2018-09-01 0      13%  1020 mb  Excellent  \n",
       "           3      96%  1020 mb  Excellent  \n",
       "           6     100%  1020 mb  Excellent  \n",
       "           9      78%  1021 mb  Excellent  \n",
       "           12     87%  1021 mb  Excellent  \n",
       "           15     97%  1021 mb  Excellent  \n",
       "           18     98%  1022 mb  Excellent  \n",
       "           21     52%  1022 mb  Excellent  \n",
       "2018-09-02 0      31%  1022 mb       Poor  \n",
       "           3      52%  1020 mb       Poor  \n",
       "           6      67%  1020 mb       Poor  \n",
       "           9      80%  1020 mb  Excellent  \n",
       "           12     93%  1019 mb  Excellent  \n",
       "           15     90%  1019 mb  Excellent  \n",
       "           18     70%  1019 mb  Excellent  \n",
       "           21     82%  1020 mb       Poor  "
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weather_df.date = pd.to_datetime(weather_df.date)\n",
    "weather_df = weather_df.set_index(weather_df.date)\n",
    "weather_df[\"time\"] = pd.to_datetime(weather_df.time)\n",
    "weather_df[\"time\"] = weather_df[\"time\"].dt.hour\n",
    "weather_df = weather_df.set_index([weather_df.index, weather_df.time])\n",
    "weather_df.drop([\"date\", \"time\"], axis=1, inplace=True)\n",
    "weather_df.head(16)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "4a0b28d4",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\moste\\AppData\\Local\\Temp/ipykernel_18012/4018689352.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  time_df[\"hours\"] = time_df.started_at.dt.hour\n",
      "C:\\Users\\moste\\anaconda3\\lib\\site-packages\\pandas\\core\\generic.py:5516: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self[name] = value\n",
      "C:\\Users\\moste\\AppData\\Local\\Temp/ipykernel_18012/4018689352.py:4: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  time_df[\"hours\"] = pd.to_datetime(time_df.hours, unit=\"h\")\n",
      "C:\\Users\\moste\\AppData\\Local\\Temp/ipykernel_18012/4018689352.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  time_df[\"hours\"] = time_df[\"hours\"].dt.hour\n",
      "C:\\Users\\moste\\AppData\\Local\\Temp/ipykernel_18012/4018689352.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  time_df[\"count\"] = 1\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-09-15</th>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-16</th>\n",
       "      <th>0</th>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-17</th>\n",
       "      <th>0</th>\n",
       "      <td>403</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-18</th>\n",
       "      <th>0</th>\n",
       "      <td>126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-19</th>\n",
       "      <th>0</th>\n",
       "      <td>77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-20</th>\n",
       "      <th>0</th>\n",
       "      <td>112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-21</th>\n",
       "      <th>0</th>\n",
       "      <td>94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-22</th>\n",
       "      <th>0</th>\n",
       "      <td>157</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-23</th>\n",
       "      <th>0</th>\n",
       "      <td>234</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-24</th>\n",
       "      <th>0</th>\n",
       "      <td>158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-25</th>\n",
       "      <th>0</th>\n",
       "      <td>144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-26</th>\n",
       "      <th>0</th>\n",
       "      <td>114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-27</th>\n",
       "      <th>0</th>\n",
       "      <td>134</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-28</th>\n",
       "      <th>0</th>\n",
       "      <td>168</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-29</th>\n",
       "      <th>0</th>\n",
       "      <td>134</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 count\n",
       "date       time       \n",
       "2018-09-15 0         3\n",
       "2018-09-16 0        10\n",
       "2018-09-17 0       403\n",
       "2018-09-18 0       126\n",
       "2018-09-19 0        77\n",
       "2018-09-20 0       112\n",
       "2018-09-21 0        94\n",
       "2018-09-22 0       157\n",
       "2018-09-23 0       234\n",
       "2018-09-24 0       158\n",
       "2018-09-25 0       144\n",
       "2018-09-26 0       114\n",
       "2018-09-27 0       134\n",
       "2018-09-28 0       168\n",
       "2018-09-29 0       134"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "time_df = bikes_df[[\"started_at\"]]\n",
    "time_df[\"hours\"] = time_df.started_at.dt.hour\n",
    "time_df.started_at = time_df.started_at.dt.date\n",
    "time_df[\"hours\"] = pd.to_datetime(time_df.hours, unit=\"h\")\n",
    "time_df[\"hours\"] = time_df[\"hours\"].dt.hour\n",
    "time_df[\"count\"] = 1\n",
    "time_df.set_index(\"started_at\", inplace=True)\n",
    "time_df = time_df.groupby([\"started_at\", \"hours\"]).count().rename_axis([\"date\",\"time\"])\n",
    "time_df.head(15)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ccf65538",
   "metadata": {},
   "source": [
    "  Úprava datového typu na hodnoty číselné"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "646410b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "weather_df[\"temp\"] = weather_df[\"temp\"].str.replace(\"°c\",\" \")\n",
    "weather_df[\"temp\"] = pd.to_numeric(weather_df[\"temp\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b6565e7",
   "metadata": {},
   "source": [
    "Odstranení nepotřebných indexů"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "1da46769",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>time</th>\n",
       "      <th>temp</th>\n",
       "      <th>feels</th>\n",
       "      <th>wind</th>\n",
       "      <th>gust</th>\n",
       "      <th>rain</th>\n",
       "      <th>humidity</th>\n",
       "      <th>cloud</th>\n",
       "      <th>pressure</th>\n",
       "      <th>vis</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018-09-01</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>11 °c</td>\n",
       "      <td>9 km/h from S</td>\n",
       "      <td>19 km/h</td>\n",
       "      <td>0.0 mm</td>\n",
       "      <td>79%</td>\n",
       "      <td>13%</td>\n",
       "      <td>1020 mb</td>\n",
       "      <td>Excellent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018-09-01</td>\n",
       "      <td>3</td>\n",
       "      <td>13</td>\n",
       "      <td>12 °c</td>\n",
       "      <td>11 km/h from SSW</td>\n",
       "      <td>19 km/h</td>\n",
       "      <td>0.0 mm</td>\n",
       "      <td>76%</td>\n",
       "      <td>96%</td>\n",
       "      <td>1020 mb</td>\n",
       "      <td>Excellent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018-09-01</td>\n",
       "      <td>6</td>\n",
       "      <td>14</td>\n",
       "      <td>13 °c</td>\n",
       "      <td>11 km/h from SSW</td>\n",
       "      <td>19 km/h</td>\n",
       "      <td>0.0 mm</td>\n",
       "      <td>84%</td>\n",
       "      <td>100%</td>\n",
       "      <td>1020 mb</td>\n",
       "      <td>Excellent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018-09-01</td>\n",
       "      <td>9</td>\n",
       "      <td>14</td>\n",
       "      <td>13 °c</td>\n",
       "      <td>14 km/h from SSW</td>\n",
       "      <td>23 km/h</td>\n",
       "      <td>0.1 mm</td>\n",
       "      <td>88%</td>\n",
       "      <td>78%</td>\n",
       "      <td>1021 mb</td>\n",
       "      <td>Excellent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2018-09-01</td>\n",
       "      <td>12</td>\n",
       "      <td>16</td>\n",
       "      <td>16 °c</td>\n",
       "      <td>15 km/h from SSW</td>\n",
       "      <td>22 km/h</td>\n",
       "      <td>0.0 mm</td>\n",
       "      <td>87%</td>\n",
       "      <td>87%</td>\n",
       "      <td>1021 mb</td>\n",
       "      <td>Excellent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6331</th>\n",
       "      <td>2020-10-31</td>\n",
       "      <td>9</td>\n",
       "      <td>14</td>\n",
       "      <td>12 °c</td>\n",
       "      <td>21 km/h from SSE</td>\n",
       "      <td>33 km/h</td>\n",
       "      <td>0.4 mm</td>\n",
       "      <td>86%</td>\n",
       "      <td>100%</td>\n",
       "      <td>993 mb</td>\n",
       "      <td>Poor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6332</th>\n",
       "      <td>2020-10-31</td>\n",
       "      <td>12</td>\n",
       "      <td>14</td>\n",
       "      <td>12 °c</td>\n",
       "      <td>24 km/h from SSE</td>\n",
       "      <td>37 km/h</td>\n",
       "      <td>0.4 mm</td>\n",
       "      <td>88%</td>\n",
       "      <td>94%</td>\n",
       "      <td>987 mb</td>\n",
       "      <td>Poor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6333</th>\n",
       "      <td>2020-10-31</td>\n",
       "      <td>15</td>\n",
       "      <td>10</td>\n",
       "      <td>6 °c</td>\n",
       "      <td>42 km/h from SW</td>\n",
       "      <td>55 km/h</td>\n",
       "      <td>0.5 mm</td>\n",
       "      <td>75%</td>\n",
       "      <td>100%</td>\n",
       "      <td>989 mb</td>\n",
       "      <td>Excellent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6334</th>\n",
       "      <td>2020-10-31</td>\n",
       "      <td>18</td>\n",
       "      <td>9</td>\n",
       "      <td>5 °c</td>\n",
       "      <td>38 km/h from WSW</td>\n",
       "      <td>54 km/h</td>\n",
       "      <td>0.0 mm</td>\n",
       "      <td>76%</td>\n",
       "      <td>79%</td>\n",
       "      <td>994 mb</td>\n",
       "      <td>Excellent</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6335</th>\n",
       "      <td>2020-10-31</td>\n",
       "      <td>21</td>\n",
       "      <td>8</td>\n",
       "      <td>4 °c</td>\n",
       "      <td>36 km/h from SW</td>\n",
       "      <td>49 km/h</td>\n",
       "      <td>0.1 mm</td>\n",
       "      <td>74%</td>\n",
       "      <td>79%</td>\n",
       "      <td>997 mb</td>\n",
       "      <td>Excellent</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6336 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           date  time  temp  feels              wind     gust    rain  \\\n",
       "0    2018-09-01     0    11  11 °c     9 km/h from S  19 km/h  0.0 mm   \n",
       "1    2018-09-01     3    13  12 °c  11 km/h from SSW  19 km/h  0.0 mm   \n",
       "2    2018-09-01     6    14  13 °c  11 km/h from SSW  19 km/h  0.0 mm   \n",
       "3    2018-09-01     9    14  13 °c  14 km/h from SSW  23 km/h  0.1 mm   \n",
       "4    2018-09-01    12    16  16 °c  15 km/h from SSW  22 km/h  0.0 mm   \n",
       "...         ...   ...   ...    ...               ...      ...     ...   \n",
       "6331 2020-10-31     9    14  12 °c  21 km/h from SSE  33 km/h  0.4 mm   \n",
       "6332 2020-10-31    12    14  12 °c  24 km/h from SSE  37 km/h  0.4 mm   \n",
       "6333 2020-10-31    15    10   6 °c   42 km/h from SW  55 km/h  0.5 mm   \n",
       "6334 2020-10-31    18     9   5 °c  38 km/h from WSW  54 km/h  0.0 mm   \n",
       "6335 2020-10-31    21     8   4 °c   36 km/h from SW  49 km/h  0.1 mm   \n",
       "\n",
       "     humidity cloud pressure        vis  \n",
       "0         79%   13%  1020 mb  Excellent  \n",
       "1         76%   96%  1020 mb  Excellent  \n",
       "2         84%  100%  1020 mb  Excellent  \n",
       "3         88%   78%  1021 mb  Excellent  \n",
       "4         87%   87%  1021 mb  Excellent  \n",
       "...       ...   ...      ...        ...  \n",
       "6331      86%  100%   993 mb       Poor  \n",
       "6332      88%   94%   987 mb       Poor  \n",
       "6333      75%  100%   989 mb  Excellent  \n",
       "6334      76%   79%   994 mb  Excellent  \n",
       "6335      74%   79%   997 mb  Excellent  \n",
       "\n",
       "[6336 rows x 11 columns]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weather_df.reset_index()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76288d75",
   "metadata": {},
   "source": [
    "Vytvoření tabulky s údaji o průměrné denní teplotě u jednotlivých dnů"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "6aaca531",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>temp</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-09-01</th>\n",
       "      <td>14.375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-02</th>\n",
       "      <td>16.500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-03</th>\n",
       "      <td>11.875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-04</th>\n",
       "      <td>11.250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-05</th>\n",
       "      <td>12.500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-10-27</th>\n",
       "      <td>7.125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-10-28</th>\n",
       "      <td>7.250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-10-29</th>\n",
       "      <td>6.750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-10-30</th>\n",
       "      <td>10.500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-10-31</th>\n",
       "      <td>10.125</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>792 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              temp\n",
       "date              \n",
       "2018-09-01  14.375\n",
       "2018-09-02  16.500\n",
       "2018-09-03  11.875\n",
       "2018-09-04  11.250\n",
       "2018-09-05  12.500\n",
       "...            ...\n",
       "2020-10-27   7.125\n",
       "2020-10-28   7.250\n",
       "2020-10-29   6.750\n",
       "2020-10-30  10.500\n",
       "2020-10-31  10.125\n",
       "\n",
       "[792 rows x 1 columns]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temperature_df= weather_df.groupby([\"date\"]).mean()\n",
    "temperature_df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80f2ba04",
   "metadata": {},
   "source": [
    "Vytvoření tabulkek s údaji nejvíce a nejméně vypůjčených kol, podle průměrné denní teploty"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "c086e80a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>temp</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2020-06-20</th>\n",
       "      <th>0</th>\n",
       "      <td>2428</td>\n",
       "      <td>15.375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-05-30</th>\n",
       "      <th>0</th>\n",
       "      <td>2065</td>\n",
       "      <td>16.500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-05-31</th>\n",
       "      <th>0</th>\n",
       "      <td>2036</td>\n",
       "      <td>13.625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-05-29</th>\n",
       "      <th>0</th>\n",
       "      <td>1832</td>\n",
       "      <td>18.875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-05-25</th>\n",
       "      <th>0</th>\n",
       "      <td>1721</td>\n",
       "      <td>13.000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-08</th>\n",
       "      <th>0</th>\n",
       "      <td>1700</td>\n",
       "      <td>14.250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-06-24</th>\n",
       "      <th>0</th>\n",
       "      <td>1646</td>\n",
       "      <td>17.250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-06-25</th>\n",
       "      <th>0</th>\n",
       "      <td>1644</td>\n",
       "      <td>18.500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-07-31</th>\n",
       "      <th>0</th>\n",
       "      <td>1591</td>\n",
       "      <td>18.500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-05-20</th>\n",
       "      <th>0</th>\n",
       "      <td>1589</td>\n",
       "      <td>15.500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 count    temp\n",
       "date       time               \n",
       "2020-06-20 0      2428  15.375\n",
       "2020-05-30 0      2065  16.500\n",
       "2020-05-31 0      2036  13.625\n",
       "2020-05-29 0      1832  18.875\n",
       "2020-05-25 0      1721  13.000\n",
       "2020-08-08 0      1700  14.250\n",
       "2020-06-24 0      1646  17.250\n",
       "2020-06-25 0      1644  18.500\n",
       "2020-07-31 0      1591  18.500\n",
       "2020-05-20 0      1589  15.500"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avg_df = time_df.join(temperature_df,how = \"left\")\n",
    "avg_df.sort_values(by = \"count\", ascending= False).head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "b1bbfa46",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>temp</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-09-15</th>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>10.500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-16</th>\n",
       "      <th>0</th>\n",
       "      <td>10</td>\n",
       "      <td>12.875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-17</th>\n",
       "      <th>0</th>\n",
       "      <td>403</td>\n",
       "      <td>13.875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-18</th>\n",
       "      <th>0</th>\n",
       "      <td>126</td>\n",
       "      <td>14.125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-19</th>\n",
       "      <th>0</th>\n",
       "      <td>77</td>\n",
       "      <td>11.750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-20</th>\n",
       "      <th>0</th>\n",
       "      <td>112</td>\n",
       "      <td>10.125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-21</th>\n",
       "      <th>0</th>\n",
       "      <td>94</td>\n",
       "      <td>8.875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-22</th>\n",
       "      <th>0</th>\n",
       "      <td>157</td>\n",
       "      <td>8.875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-23</th>\n",
       "      <th>0</th>\n",
       "      <td>234</td>\n",
       "      <td>7.500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-24</th>\n",
       "      <th>0</th>\n",
       "      <td>158</td>\n",
       "      <td>8.625</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 count    temp\n",
       "date       time               \n",
       "2018-09-15 0         3  10.500\n",
       "2018-09-16 0        10  12.875\n",
       "2018-09-17 0       403  13.875\n",
       "2018-09-18 0       126  14.125\n",
       "2018-09-19 0        77  11.750\n",
       "2018-09-20 0       112  10.125\n",
       "2018-09-21 0        94   8.875\n",
       "2018-09-22 0       157   8.875\n",
       "2018-09-23 0       234   7.500\n",
       "2018-09-24 0       158   8.625"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avg_df.sort_values(by = \"temp\", ascending= False)\n",
    "avg_df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "ca83f5f3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>temp</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-09-15</th>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>10.500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-16</th>\n",
       "      <th>0</th>\n",
       "      <td>10</td>\n",
       "      <td>12.875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-17</th>\n",
       "      <th>0</th>\n",
       "      <td>403</td>\n",
       "      <td>13.875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-18</th>\n",
       "      <th>0</th>\n",
       "      <td>126</td>\n",
       "      <td>14.125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-19</th>\n",
       "      <th>0</th>\n",
       "      <td>77</td>\n",
       "      <td>11.750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-20</th>\n",
       "      <th>0</th>\n",
       "      <td>112</td>\n",
       "      <td>10.125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-21</th>\n",
       "      <th>0</th>\n",
       "      <td>94</td>\n",
       "      <td>8.875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-22</th>\n",
       "      <th>0</th>\n",
       "      <td>157</td>\n",
       "      <td>8.875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-23</th>\n",
       "      <th>0</th>\n",
       "      <td>234</td>\n",
       "      <td>7.500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-24</th>\n",
       "      <th>0</th>\n",
       "      <td>158</td>\n",
       "      <td>8.625</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 count    temp\n",
       "date       time               \n",
       "2018-09-15 0         3  10.500\n",
       "2018-09-16 0        10  12.875\n",
       "2018-09-17 0       403  13.875\n",
       "2018-09-18 0       126  14.125\n",
       "2018-09-19 0        77  11.750\n",
       "2018-09-20 0       112  10.125\n",
       "2018-09-21 0        94   8.875\n",
       "2018-09-22 0       157   8.875\n",
       "2018-09-23 0       234   7.500\n",
       "2018-09-24 0       158   8.625"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avg_df.loc[avg_df[\"count\"]>0].sort_values(\"count\",ascending = True)\n",
    "avg_df = avg_df.fillna(0)\n",
    "avg_df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "f9981f75",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "avg_df.plot.scatter(x=\"count\", y=\"temp\", color=\"Red\")\n",
    "plt.xlabel(\"Count\", fontsize=18)\n",
    "plt.title(\"Borrowings by temperature\", fontsize=30)\n",
    "plt.ylabel(\"Temp\", fontsize=18)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "468abedb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rain</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-09-01</th>\n",
       "      <td>0.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-02</th>\n",
       "      <td>0.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-03</th>\n",
       "      <td>0.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-04</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-05</th>\n",
       "      <td>0.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-10-27</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-10-28</th>\n",
       "      <td>1.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-10-29</th>\n",
       "      <td>10.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-10-30</th>\n",
       "      <td>0.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-10-31</th>\n",
       "      <td>2.8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>792 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            rain\n",
       "date            \n",
       "2018-09-01   0.1\n",
       "2018-09-02   0.4\n",
       "2018-09-03   0.3\n",
       "2018-09-04   0.0\n",
       "2018-09-05   0.4\n",
       "...          ...\n",
       "2020-10-27   1.0\n",
       "2020-10-28   1.2\n",
       "2020-10-29  10.1\n",
       "2020-10-30   0.7\n",
       "2020-10-31   2.8\n",
       "\n",
       "[792 rows x 1 columns]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "weather_df[\"rain\"] = weather_df[\"rain\"].apply(str).str.replace(\"mm\",\" \")\n",
    "weather_df[\"rain\"] = pd.to_numeric(weather_df[\"rain\"])\n",
    "rain_df = weather_df.groupby([\"date\"]).sum()\n",
    "rain_df = rain_df.drop(columns =\"temp\")\n",
    "rain_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "ccf25e9a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>rain</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2020-06-20</th>\n",
       "      <th>0</th>\n",
       "      <td>2428</td>\n",
       "      <td>6.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-05-30</th>\n",
       "      <th>0</th>\n",
       "      <td>2065</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-05-31</th>\n",
       "      <th>0</th>\n",
       "      <td>2036</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-05-29</th>\n",
       "      <th>0</th>\n",
       "      <td>1832</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-05-25</th>\n",
       "      <th>0</th>\n",
       "      <td>1721</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-08</th>\n",
       "      <th>0</th>\n",
       "      <td>1700</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-06-24</th>\n",
       "      <th>0</th>\n",
       "      <td>1646</td>\n",
       "      <td>0.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-06-25</th>\n",
       "      <th>0</th>\n",
       "      <td>1644</td>\n",
       "      <td>0.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-07-31</th>\n",
       "      <th>0</th>\n",
       "      <td>1591</td>\n",
       "      <td>0.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-05-20</th>\n",
       "      <th>0</th>\n",
       "      <td>1589</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-06-01</th>\n",
       "      <th>0</th>\n",
       "      <td>1578</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-07-11</th>\n",
       "      <th>0</th>\n",
       "      <td>1573</td>\n",
       "      <td>0.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-06-06</th>\n",
       "      <th>0</th>\n",
       "      <td>1539</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-05-28</th>\n",
       "      <th>0</th>\n",
       "      <td>1522</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-07-12</th>\n",
       "      <th>0</th>\n",
       "      <td>1435</td>\n",
       "      <td>0.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-07-21</th>\n",
       "      <th>0</th>\n",
       "      <td>1434</td>\n",
       "      <td>0.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-05-26</th>\n",
       "      <th>0</th>\n",
       "      <td>1422</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-05-09</th>\n",
       "      <th>0</th>\n",
       "      <td>1370</td>\n",
       "      <td>3.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-07-18</th>\n",
       "      <th>0</th>\n",
       "      <td>1361</td>\n",
       "      <td>0.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-06</th>\n",
       "      <th>0</th>\n",
       "      <td>1337</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 count  rain\n",
       "date       time             \n",
       "2020-06-20 0      2428   6.3\n",
       "2020-05-30 0      2065   0.0\n",
       "2020-05-31 0      2036   0.0\n",
       "2020-05-29 0      1832   0.0\n",
       "2020-05-25 0      1721   0.0\n",
       "2020-08-08 0      1700   0.2\n",
       "2020-06-24 0      1646   0.4\n",
       "2020-06-25 0      1644   0.6\n",
       "2020-07-31 0      1591   0.3\n",
       "2020-05-20 0      1589   0.0\n",
       "2020-06-01 0      1578   0.0\n",
       "2020-07-11 0      1573   0.7\n",
       "2020-06-06 0      1539   6.0\n",
       "2020-05-28 0      1522   0.0\n",
       "2020-07-12 0      1435   0.2\n",
       "2020-07-21 0      1434   0.6\n",
       "2020-05-26 0      1422   0.0\n",
       "2020-05-09 0      1370   3.3\n",
       "2020-07-18 0      1361   0.4\n",
       "2020-08-06 0      1337   0.5"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "join_df = time_df.join(rain_df,how = \"left\")\n",
    "join_df.sort_values(by = \"count\", ascending = False).head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "ac1380a5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>rain</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-09-15</th>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-16</th>\n",
       "      <th>0</th>\n",
       "      <td>10</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-10-13</th>\n",
       "      <th>0</th>\n",
       "      <td>49</td>\n",
       "      <td>13.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-02-09</th>\n",
       "      <th>0</th>\n",
       "      <td>50</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-03</th>\n",
       "      <th>0</th>\n",
       "      <td>53</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-16</th>\n",
       "      <th>0</th>\n",
       "      <td>59</td>\n",
       "      <td>18.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-02-10</th>\n",
       "      <th>0</th>\n",
       "      <td>60</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-12-24</th>\n",
       "      <th>0</th>\n",
       "      <td>61</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-02-11</th>\n",
       "      <th>0</th>\n",
       "      <td>63</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-26</th>\n",
       "      <th>0</th>\n",
       "      <td>64</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-03-10</th>\n",
       "      <th>0</th>\n",
       "      <td>65</td>\n",
       "      <td>3.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-21</th>\n",
       "      <th>0</th>\n",
       "      <td>71</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-04</th>\n",
       "      <th>0</th>\n",
       "      <td>72</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-29</th>\n",
       "      <th>0</th>\n",
       "      <td>75</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-19</th>\n",
       "      <th>0</th>\n",
       "      <td>77</td>\n",
       "      <td>2.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-02-14</th>\n",
       "      <th>0</th>\n",
       "      <td>78</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-04-07</th>\n",
       "      <th>0</th>\n",
       "      <td>79</td>\n",
       "      <td>1.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-02</th>\n",
       "      <th>0</th>\n",
       "      <td>80</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-10-12</th>\n",
       "      <th>0</th>\n",
       "      <td>80</td>\n",
       "      <td>4.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-11-20</th>\n",
       "      <th>0</th>\n",
       "      <td>81</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 count  rain\n",
       "date       time             \n",
       "2018-09-15 0         3   1.0\n",
       "2018-09-16 0        10   1.0\n",
       "2018-10-13 0        49  13.6\n",
       "2021-02-09 0        50   NaN\n",
       "2021-01-03 0        53   NaN\n",
       "2019-03-16 0        59  18.6\n",
       "2021-02-10 0        60   NaN\n",
       "2018-12-24 0        61   0.0\n",
       "2021-02-11 0        63   NaN\n",
       "2020-12-26 0        64   NaN\n",
       "2019-03-10 0        65   3.8\n",
       "2021-01-21 0        71   NaN\n",
       "2021-01-04 0        72   NaN\n",
       "2020-12-29 0        75   NaN\n",
       "2018-09-19 0        77   2.9\n",
       "2021-02-14 0        78   NaN\n",
       "2019-04-07 0        79   1.6\n",
       "2019-02-02 0        80   0.0\n",
       "2018-10-12 0        80   4.2\n",
       "2018-11-20 0        81   0.0"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "join_df.loc[join_df[\"count\"]>0].sort_values(\"count\",ascending = True).head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "78469a6f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>rain</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2020-10-03</th>\n",
       "      <th>0</th>\n",
       "      <td>216</td>\n",
       "      <td>51.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-10-04</th>\n",
       "      <th>0</th>\n",
       "      <td>735</td>\n",
       "      <td>38.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-04</th>\n",
       "      <th>0</th>\n",
       "      <td>334</td>\n",
       "      <td>37.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-08-11</th>\n",
       "      <th>0</th>\n",
       "      <td>224</td>\n",
       "      <td>36.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-25</th>\n",
       "      <th>0</th>\n",
       "      <td>270</td>\n",
       "      <td>34.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-05-26</th>\n",
       "      <th>0</th>\n",
       "      <td>300</td>\n",
       "      <td>34.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-06-24</th>\n",
       "      <th>0</th>\n",
       "      <td>200</td>\n",
       "      <td>32.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-07-23</th>\n",
       "      <th>0</th>\n",
       "      <td>898</td>\n",
       "      <td>30.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-02-15</th>\n",
       "      <th>0</th>\n",
       "      <td>163</td>\n",
       "      <td>29.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-02-09</th>\n",
       "      <th>0</th>\n",
       "      <td>136</td>\n",
       "      <td>29.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-08-09</th>\n",
       "      <th>0</th>\n",
       "      <td>401</td>\n",
       "      <td>28.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-02-21</th>\n",
       "      <th>0</th>\n",
       "      <td>279</td>\n",
       "      <td>26.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-10-06</th>\n",
       "      <th>0</th>\n",
       "      <td>154</td>\n",
       "      <td>26.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-12</th>\n",
       "      <th>0</th>\n",
       "      <td>1148</td>\n",
       "      <td>25.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-08-11</th>\n",
       "      <th>0</th>\n",
       "      <td>700</td>\n",
       "      <td>24.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-10</th>\n",
       "      <th>0</th>\n",
       "      <td>203</td>\n",
       "      <td>23.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-02-07</th>\n",
       "      <th>0</th>\n",
       "      <td>150</td>\n",
       "      <td>23.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-03-01</th>\n",
       "      <th>0</th>\n",
       "      <td>222</td>\n",
       "      <td>22.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-01-11</th>\n",
       "      <th>0</th>\n",
       "      <td>126</td>\n",
       "      <td>22.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-06-13</th>\n",
       "      <th>0</th>\n",
       "      <td>198</td>\n",
       "      <td>22.3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 count  rain\n",
       "date       time             \n",
       "2020-10-03 0       216  51.8\n",
       "2020-10-04 0       735  38.1\n",
       "2020-08-04 0       334  37.6\n",
       "2019-08-11 0       224  36.4\n",
       "2020-08-25 0       270  34.7\n",
       "2019-05-26 0       300  34.2\n",
       "2019-06-24 0       200  32.7\n",
       "2020-07-23 0       898  30.8\n",
       "2020-02-15 0       163  29.8\n",
       "2020-02-09 0       136  29.5\n",
       "2019-08-09 0       401  28.0\n",
       "2020-02-21 0       279  26.6\n",
       "2019-10-06 0       154  26.4\n",
       "2020-08-12 0      1148  25.0\n",
       "2020-08-11 0       700  24.1\n",
       "2019-12-10 0       203  23.7\n",
       "2019-02-07 0       150  23.1\n",
       "2020-03-01 0       222  22.6\n",
       "2020-01-11 0       126  22.6\n",
       "2019-06-13 0       198  22.3"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "join_df.sort_values(by = \"rain\", ascending = False).head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "974418e5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "join_df.plot.scatter(x=\"count\", y=\"rain\", color=\"Red\")\n",
    "plt.xlabel(\"Count\", fontsize=18)\n",
    "plt.title(\"Borrowings by deduction\", fontsize=30)\n",
    "plt.ylabel(\"Rain\", fontsize=18)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f1a2903",
   "metadata": {},
   "source": [
    "# 11. půjčují si lidé kola více o víkendu než během pracovního týdne?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc6b394e",
   "metadata": {},
   "source": [
    "Výpočet podle aktivních výpůjček ze startovacích stanic.\n",
    "Dny v týdnu jsou časově rozděleny"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "3f4d7fec",
   "metadata": {},
   "outputs": [],
   "source": [
    "bikes_df[\"started_at\"] = pd.to_datetime(bikes_df[\"started_at\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "57d3be0b",
   "metadata": {},
   "outputs": [],
   "source": [
    "bikes_df[\"weekday\"] = bikes_df[\"started_at\"].dt.weekday"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "ff196f0a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>weekday</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Monday</th>\n",
       "      <td>57949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tuesday</th>\n",
       "      <td>58662</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Wednesday</th>\n",
       "      <td>59605</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Thursday</th>\n",
       "      <td>60809</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           index\n",
       "weekday         \n",
       "Monday     57949\n",
       "Tuesday    58662\n",
       "Wednesday  59605\n",
       "Thursday   60809"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "borr_df = bikes_df.groupby(\"weekday\")[['index']].count()\n",
    "borr_df.rename(index={0: \"Monday\", 1: \"Tuesday\", 2: \"Wednesday\", 3: \"Thursday\", 4: \"Friday\", 5: \"Saturday\", 6: \"Sunday\"}).head(4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "357a9f09",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(8,8))\n",
    "colors = [\"green\", \"yellow\",\"blue\", \"grey\", \"pink\", \"orange\", \"purple\"]\n",
    "labels = [r\"Monday\", r\"Tuesday\", r\"Wednesday\", r\"Thursday\", r\"Friday\", r\"Saturday\", r\"Sunday\"]\n",
    "ax.pie(borr_df.values.flatten(), colors=colors,autopct=\"%1.1f%%\", shadow=True, startangle=50, labels=labels)\n",
    "ax.set_title(\"Bicycle rental by days\", fontsize=20)\n",
    "plt.legend(labels, loc=\"best\")\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
